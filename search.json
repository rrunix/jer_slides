[
  {
    "objectID": "ch1_p1_net_introduction.html#qué-es-internet",
    "href": "ch1_p1_net_introduction.html#qué-es-internet",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "¿Qué es Internet?",
    "text": "¿Qué es Internet?\n\n\nEtimología: “Interconnected Networks”\n\nRed global de redes interconectadas\nSistema descentralizado\nMúltiples capas jerárquicas\n\n\nCaracterísticas principales:\n\nArquitectura distribuida\nResiliencia a fallos\nEscalabilidad natural\nSin control centralizado\n\n\n\n\n\n\n\ngraph LR\n    G1[\"🌐 Google A\"]\n    F1[\"📘 Facebook\"]\n    G2[\"🌐 Google B\"]\n    A1[\"🛒 Amazon\"]\n    N1[\"📺 Netflix\"]\n    U1[\"👤 Usuario\"]\n    \n    %% Conexiones normales\n    G1 ---|\"✅\"| F1\n    F1 ---|\"✅\"| G2\n    G1 ---|\"✅\"| A1\n    A1 ---|\"✅\"| N1\n    N1 ---|\"✅\"| G2\n    U1 ---|\"✅\"| G1\n    \n    %% Conexiones rotas\n    G2 -.-|\"❌ ROTO\"| U1\n    A1 -.-|\"❌ ROTO\"| F1\n    \n    %% Rutas alternativas\n    U1 ---|\"🔄 Alt\"| F1\n    F1 ---|\"🔄 Alt\"| N1\n    N1 ---|\"🔄 Alt\"| G2\n    \n    classDef server fill:#4ecdc4,stroke:#00b894,stroke-width:2px,color:#fff\n    classDef user fill:#fd79a8,stroke:#e84393,stroke-width:2px,color:#fff\n    \n    class G1,F1,G2,A1,N1 server\n    class U1 user"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#jerarquía-de-redes",
    "href": "ch1_p1_net_introduction.html#jerarquía-de-redes",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Jerarquía de Redes",
    "text": "Jerarquía de Redes\n\n\n\n\n\ngraph LR\n    PAN[\"📱 PAN (Personal Area Network)&lt;br&gt;Smartphone ↔ Smartwatch\"]\n    LAN[\"🏠 LAN (Local Area Network)&lt;br&gt;Home/Office/Building Network\"]\n    WLAN[\"📡 WLAN (Wireless LAN)&lt;br&gt;Wi-Fi Implementation of LAN\"]\n    CAN[\"🏫 CAN (Campus Area Network)&lt;br&gt;Multiple LANs in Campus\"]\n    MAN_ISP[\"🏙️ MAN (Metropolitan Area Network)&lt;br&gt;ISP Network\"]\n    MAN_MOBILE[\"📶 MAN (Metropolitan Area Network)&lt;br&gt;5G/4G Mobile Network\"]\n    WAN[\"🌍 WAN (Wide Area Network)&lt;br&gt;Between Cities or Countries\"]\n    INTERNET[\"🌐 Internet&lt;br&gt;Global Interconnected WANs\"]\n    VPN[\"🔐 VPN (Virtual Private Network)&lt;br&gt;Secure Tunnel over Internet\"]\n    \n    %% Traditional wired path\n    PAN --&gt; LAN\n    WLAN -.-&gt; LAN\n    LAN --&gt;|Multiple LANs| CAN\n    CAN --&gt; MAN_ISP\n    LAN --&gt;|Multiple LANs| MAN_ISP\n    \n    %% Mobile path\n    PAN --&gt; MAN_MOBILE\n    \n    %% Both MANs connect to WAN\n    MAN_ISP --&gt;|Multiple MANs| WAN\n    MAN_MOBILE --&gt;|Multiple MANs| WAN\n    WAN --&gt;|Multiple WANs| INTERNET\n    VPN --&gt; INTERNET\n    \n    style WLAN fill:#e1f5fe\n    style VPN fill:#f3e5f5\n    style MAN_MOBILE fill:#fff3e0\n\n\n\n\n\n\n\nPAN: Red personal entre dispositivos cercanos.\nLAN: Red local de casa/oficina/edificio.\nWLAN: LAN inalámbrica (Wi-Fi).\nCAN: Red de campus - conecta múltiples LANs.\nMAN: Red metropolitana - cubre una ciudad, incluye redes de ISP y móviles (4G/5G)\nWAN: Red de área amplia - conecta ciudades o países.\nInternet: Red global - interconexión de todas las WANs del mundo\n\n\n\nPAN: Personal (smartwatch, móvil)\nLAN: Local (hogar, oficina)\nMAN: Metropolitana (ciudad)\nWAN: Área amplia (países)\nInternet: Red global"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#ejemplo-mensaje-madrid-tokio",
    "href": "ch1_p1_net_introduction.html#ejemplo-mensaje-madrid-tokio",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Ejemplo: Mensaje Madrid → Tokio",
    "text": "Ejemplo: Mensaje Madrid → Tokio\nSmartphone María (WiFI) en Madrid -&gt; Takeshi LAN en la Universidad de Tokyo\n\nOrigen LAN Madrid: Smartphone → Router WiFi\nRouter local → MAN: ISP local → MAN Madrid\nMAN → WAN nacional: MAN Madrid → WAN España\nWAN → Internet global: España → Backbone internacional\nLlegada a Japón: WAN Japón → MAN Tokio\nMAN → CAN: MAN Tokio → Universidad\nCAN → LAN: Campus → LAN específica\nDestino final: LAN → Dispositivo de Takeshi"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#un-caso-un-poco-más-real",
    "href": "ch1_p1_net_introduction.html#un-caso-un-poco-más-real",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Un caso un poco más real",
    "text": "Un caso un poco más real\n\nProbad a ejecutar en vuestras terminales traceroute www.google.es (tracert www.google.es en Windows)\n¿Qué información estáis obteniendo?\nComparadla con vuestros compañer@s. ¿Es la misma?"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#internet-simplificado",
    "href": "ch1_p1_net_introduction.html#internet-simplificado",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Internet simplificado",
    "text": "Internet simplificado"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#componentes-clave",
    "href": "ch1_p1_net_introduction.html#componentes-clave",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Componentes Clave",
    "text": "Componentes Clave\n\n\nRouter\n\nConecta diferentes redes\nUsa direcciones IP\nEnrutamiento “hop by hop”\nOpera entre redes distantes\n\n\nSwitch\n\nConecta dispositivos en misma red\nUsa direcciones MAC\nEntrega local inteligente\nOpera dentro de la LAN"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#en-nuestras-casas",
    "href": "ch1_p1_net_introduction.html#en-nuestras-casas",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "En nuestras casas",
    "text": "En nuestras casas\nEntonces… ¿Esto que es?"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#identificadores-en-red",
    "href": "ch1_p1_net_introduction.html#identificadores-en-red",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Identificadores en Red",
    "text": "Identificadores en Red\n\n\nDirección IP\n\n“Dirección postal”\nLocaliza en la red\nEjemplo: 192.168.1.100\nPuede cambiar\n\n\nDirección MAC\n\n“DNI del dispositivo”\nÚnica y permanente\nAsignada por fabricante\nNo cambia nunca\n\n\nProtocolo ARP\n\n“Directorio telefónico”\nTraduce IP ↔︎ MAC\nPermite entrega final\nOpera localmente\n\n\n\n\n\n\n\n\nEjercicio\n\n\nPrueba a ejecutar ifconfig en tu terminal MacOS/Linux o ipconfig en Windows. ¿Qué ves?."
  },
  {
    "objectID": "ch1_p1_net_introduction.html#protocolos-de-red",
    "href": "ch1_p1_net_introduction.html#protocolos-de-red",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Protocolos de Red",
    "text": "Protocolos de Red\n\nProtocolo: Serie de pasos bien definidos que especifican cómo intercambiar información entre dispositivos\n\nAnalogía del tráfico urbano\n\nSin protocolos: Caos total, pérdida de información\nCon protocolos: Flujo ordenado, comunicación efectiva"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#linea-temporal-de-internet.",
    "href": "ch1_p1_net_introduction.html#linea-temporal-de-internet.",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Linea temporal de Internet.",
    "text": "Linea temporal de Internet.\n\n\n\n\n\ntimeline\n    title Evolución de Internet: De ARPANET a la Era Digital\n    \n    section Era ARPANET (1969-1983)\n        1969 : Nace ARPANET\n             : 4 nodos iniciales (UCLA, Stanford, UC Santa Bárbara, Utah)\n             : Implementación de conmutación de paquetes\n        \n        1973 : Primera conexión internacional\n        \n        1983 : Adopción oficial de TCP/IP\n             : División de ARPANET (creación de MILNET)\n             : Nace el término \"Internet\"\n\n    section Nacimiento de la Web (1989-1995)\n        1989-1990 : Tim Berners-Lee inventa la World Wide Web\n                  : Desarrollo de HTTP, HTML y URLs\n        \n        1991 : Primer sitio web público\n\n    section Era Comercial (1995-2000)\n        1995 : Eliminación de restricciones comerciales\n             : Primeros ISPs comerciales (AOL)\n             : Aparecen Amazon y eBay\n        \n        1998 : Fundación de Google\n        \n        2000-2001 : Explosión de la burbuja punto-com\n\n    section Web 2.0 y Redes Sociales (2003-2010)\n        2003-2006 : Redes sociales\n        2007 : Lanzamiento del iPhone\n\n    section Era Moderna (2010-2025)\n        2010s : Computación en la nube, Internet de las cosas\n        \n        2020s : Inteligencia Artificial\n              : Tecnología 5G\n\n\n\n\n\n\n\n\nARPANET se creo con fines militares\nSe creo y publicó el primer sitio web (CERN)\nBurbuja punto com\nCreación de las Redes sociales.\nInteligencia Artificial Generativa."
  },
  {
    "objectID": "ch1_p1_net_introduction.html#crecimiento-exponencial",
    "href": "ch1_p1_net_introduction.html#crecimiento-exponencial",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Crecimiento Exponencial",
    "text": "Crecimiento Exponencial\nDe ~4 dispositivos (1969) a &gt;100.000 millones (2025) en 50 años."
  },
  {
    "objectID": "ch1_p1_net_introduction.html#sistemas-terminales-end-systems",
    "href": "ch1_p1_net_introduction.html#sistemas-terminales-end-systems",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Sistemas Terminales (End Systems)",
    "text": "Sistemas Terminales (End Systems)\n\nHosts (End systems): Son los dispositivos que usan Internet como PCs, smartphones, IoT, servidores. Ejecutan aplicaciones de red.\n\n\n\nClasificación\n\nClientes: Solicitan servicios\nServidores: Proporcionan servicios\nRoles dinámicos (P2P)\n\n\n\n\n\n\n\n\n\n---\ntitle: Cliente - Servidor \n---\ngraph TD\n    S[\"🖥️ Servidor&lt;br/&gt;Centralizado\"]\n    C1[\"💻 Cliente 1\"]\n    C2[\"📱 Cliente 2\"]\n    C3[\"🖥️ Cliente 3\"]\n    \n    C1 &lt;--&gt; S\n    C2 &lt;--&gt; S\n    C3 &lt;--&gt; S\n    \n    classDef server fill:#ff6b6b,stroke:#d63031,stroke-width:3px,color:#fff\n    classDef client fill:#74b9ff,stroke:#0984e3,stroke-width:2px,color:#fff\n    \n    class S server\n    class C1,C2,C3 client\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\ntitle: Peer to peer \n---\ngraph LR\n    P1[\"💻 Peer 1\"]\n    P2[\"📱 Peer 2\"]\n    P3[\"🖥️ Peer 3\"]\n    P4[\"💻 Peer 4\"]\n    \n    P1 &lt;--&gt; P2\n    P1 &lt;--&gt; P3\n    P2 &lt;--&gt; P3\n    P2 &lt;--&gt; P4\n    P3 &lt;--&gt; P4\n    \n    classDef peer fill:#00b894,stroke:#00a085,stroke-width:2px,color:#fff\n    \n    class P1,P2,P3,P4 peer"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#redes-de-acceso",
    "href": "ch1_p1_net_introduction.html#redes-de-acceso",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Redes de Acceso",
    "text": "Redes de Acceso\n\nRedes de acceso: Es la red en la que se conectan los host con el router de borde.\n\n\n\nTecnologías host → router\n\nWiFi 6: 200-400 Mb/s\nEthernet: 10 Gb/s\n4G LTE: 50/15 Mb/s\n5G: 300/50 Mb/s\n\n\nCaracterísticas\n\nAlcance limitado\nVelocidades variables\nMedios compartidos vs dedicados"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#tecnologías-wan",
    "href": "ch1_p1_net_introduction.html#tecnologías-wan",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Tecnologías WAN",
    "text": "Tecnologías WAN\n\nRouter de borde: Router que conecta la red de acceso con el núcleo de la red.\n\nTecnologías comunes:\n\n\n\nTecnología\nVelocidad típica\nEstado 2025\n\n\n\n\nDSL/VDSL\n50/15 Mb/s\nEn declive\n\n\nCable HFC\n300/30 Mb/s\nEstable\n\n\nFTTH PON\n1000/1000 Mb/s\nEn expansión\n\n\nFTTH P2P\n10000/10000 Mb/s\nPremium\n\n\nSatelital\n100/20 Mb/s\nNicho"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#núcleo-de-la-red-isps",
    "href": "ch1_p1_net_introduction.html#núcleo-de-la-red-isps",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Núcleo de la Red: ISPs",
    "text": "Núcleo de la Red: ISPs\n\nISP (Internet Service Providers): Son los componentes del núcleo de la red y proporcionan interconexión entre diferentes redes.\n\n\n\n\n\n\n\ngraph LR\n    T1A[\"Tier 1&lt;br/&gt;🌍 Cogent\"]\n    T1B[\"Tier 1&lt;br/&gt;🌍 Level 3\"]\n    \n    T2A[\"Tier 2&lt;br/&gt;🇪🇸 Movistar\"]\n    T2B[\"Tier 2&lt;br/&gt;🇪🇸 Vodafone\"]\n    \n    T3A[\"Tier 3&lt;br/&gt;🏠 Lowi\"]\n    T3B[\"Tier 3&lt;br/&gt;🏠 Pepephone\"]\n    \n    \n    %% Tier 1 peering\n    T1A &lt;-.-&gt;|\"Peering Gratuito\"| T1B\n    \n    %% Tier 2 comprando de Tier 1\n    T1A --&gt;|\"Tránsito (€€€)\"| T2A\n    T1B --&gt;|\"Tránsito (€€€)\"| T2B\n    \n    %% Tier 3 comprando de Tier 2\n    T2A --&gt;|\"Tránsito (€€)\"| T3A\n    T2B --&gt;|\"Tránsito (€€)\"| T3B\n\n    T2A  &lt;-.-&gt;|\"Peering Gratuito\"| T2B\n    \n    %% Styling\n    classDef tier1 fill:#ff6b6b,stroke:#d63031,stroke-width:3px,color:#fff\n    classDef tier2 fill:#4ecdc4,stroke:#00b894,stroke-width:2px,color:#fff\n    classDef tier3 fill:#fdcb6e,stroke:#e17055,stroke-width:2px,color:#2d3436\n    classDef users fill:#a29bfe,stroke:#6c5ce7,stroke-width:2px,color:#fff\n    \n    class T1A,T1B tier1\n    class T2A,T2B tier2\n    class T3A,T3B tier3\n    class U1,U2 users\n\n\n\n\n\n\n\n\n\nTier 1\n\nCobertura global\nPeering gratuito\nAT&T, Telefónica\n10-100 Gb/s\n\n\nTier 2\n\nCobertura regional/nacional\nPagan tránsito a Tier 1\nPeering selectivo\n\n\nTier 3\n\nAcceso local\nÚltima milla\nUsuarios finales\nSin peering"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#arquitecturas-por-capas",
    "href": "ch1_p1_net_introduction.html#arquitecturas-por-capas",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Arquitecturas por Capas",
    "text": "Arquitecturas por Capas\n\n\n\nCada capa = responsabilidad específica\nServicios a capa superior\nUsa servicios de capa inferior\nDesarrollo independiente\n\n\n\n\n\n\n\n\ngraph TD\n    C1[\"🌐 Capa 1&lt;br/&gt;Frontend&lt;br/&gt;&lt;small&gt;Javascript, HTML, CSS&lt;/small&gt;\"]\n    C2[\"⚡ Capa 2&lt;br/&gt;API/Backend&lt;br/&gt;&lt;small&gt;Node.js, Express&lt;/small&gt;\"]\n    C3[\"💾 Capa 3&lt;br/&gt;Base de Datos&lt;br/&gt;&lt;small&gt;MongoDB, PostgreSQL&lt;/small&gt;\"]\n    \n    C1 &lt;--&gt; C2\n    C2 &lt;--&gt; C3\n    \n    classDef frontend fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    classDef backend fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    classDef database fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n    \n    class C1 frontend\n    class C2 backend\n    class C3 database"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#encapsulación",
    "href": "ch1_p1_net_introduction.html#encapsulación",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Encapsulación",
    "text": "Encapsulación\n\n\n\nCada capa añade headers\nDatos superiores = payload\nNo modifica contenido interno\n\n\n\n\n\n\n\ngraph TD\n    subgraph L1 [\"⚡ Capa 1: Enlace - Header Ethernet\"]\n        subgraph L2 [\"🌐 Capa 2: Red - Header IP\"]\n            subgraph L3 [\"📦 Capa 3: Transporte - Header TCP\"]\n                subgraph L4 [\"📧 Datos Originales\"]\n                    DATA[\"Mensaje del usuario\"]\n                end\n            end\n        end\n    end\n    \n    classDef datalink fill:#f3e5f5,stroke:#7b1fa2,stroke-width:3px\n    classDef network fill:#e3f2fd,stroke:#1976d2,stroke-width:3px\n    classDef transport fill:#fff3e0,stroke:#f57c00,stroke-width:3px\n    classDef original fill:#e8f5e8,stroke:#388e3c,stroke-width:3px\n    \n    class L1 datalink\n    class L2 network\n    class L3 transport\n    class L4 original"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#encapsulación-arquitectura-por-capas",
    "href": "ch1_p1_net_introduction.html#encapsulación-arquitectura-por-capas",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Encapsulación + Arquitectura por capas",
    "text": "Encapsulación + Arquitectura por capas\n\n\n\n\n\n\n\n---\ntitle: Encapsulación \n---\ngraph LR\n  APP[\"📧 Email\"]\n  \n  subgraph TCP [\"TCP\"]\n      APP2[\"📧 Email\"]\n  end\n  \n  subgraph IP [\"IP\"]\n      subgraph TCP2 [\"TCP\"]\n          APP3[\"📧 Email\"]\n      end\n  end\n  \n  subgraph ETH [\"Ethernet\"]\n      subgraph IP2 [\"IP\"]\n          subgraph TCP3 [\"TCP\"]\n              APP4[\"📧 Email\"]\n          end\n      end\n  end\n  \n  APP --&gt; TCP\n  TCP --&gt; IP\n  IP --&gt; ETH\n    \n  classDef app fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n  classDef transport fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n  classDef network fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n  classDef datalink fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n  \n  class APP,APP2,APP3,APP4,APP5,APP6,APP7,APP8 app\n  class TCP,TCP2,TCP3,TCP4,TCP5,TCP6 transport\n  class IP,IP2,IP3,IP4 network\n  class ETH,ETH2 datalink\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\ntitle: Desencapsulación \n---\ngraph LR\n    \n    DAPP[\"📧 Email\"]\n    \n    subgraph DTCP [\"TCP\"]\n        DAPP2[\"📧 Email\"]\n    end\n    \n    subgraph DIP [\"IP\"]\n        subgraph DTCP2 [\"TCP\"]\n            DAPP3[\"📧 Email\"]\n        end\n    end\n    \n    subgraph DETH [\"Ethernet\"]\n        subgraph DIP2 [\"IP\"]\n            subgraph DTCP3 [\"TCP\"]\n                DAPP4[\"📧 Email\"]\n            end\n        end\n    end\n    \n    DTCP --&gt; DAPP\n    DIP --&gt; DTCP\n    DETH --&gt; DIP\n    \n    classDef app fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n    classDef transport fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    classDef network fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    classDef datalink fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n\n    class DAPP,DAPP2,DAPP3,DAPP4,DAPP5,DAPP6,DAPP7,DAPP8 app\n    class DTCP,DTCP2,DTCP3,DTCP4,DTCP5,DTCP6 transport\n    class DIP,DIP2,DIP3,DIP4 network\n    class DETH,DETH2 datalink"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#modelos-osi-vs-tcpip",
    "href": "ch1_p1_net_introduction.html#modelos-osi-vs-tcpip",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Modelos OSI vs TCP/IP",
    "text": "Modelos OSI vs TCP/IP\n\n\n\n\n\n\n\nOSI: 7 capas, modelo teórico\nTCP/IP: 4 capas, usado en Internet\n\n\n\n⚠️ Nota: TCP/IP no es un protocolo, hace referencia a una pila de protocolos. Además, no tiene porque utilizar necesariamente TCP, podría ser UDP.\n\n\nTCP/IP es superior a OSI porque es simple, práctico y probado. Mientras OSI tiene 7 capas teóricas diseñadas en comités académicos, TCP/IP usa solo 4 capas que realmente se necesitan y ha funcionado en Internet durante más de 50 años. TCP/IP es más eficiente (menos overhead), más flexible (se adapta fácilmente), y tiene adopción masiva con ecosistemas completos de hardware y software. OSI llegó tarde al mercado cuando TCP/IP ya dominaba, y sus capas extra (como Sesión y Presentación) añaden complejidad innecesaria para la mayoría de aplicaciones reales. En resumen: OSI es el modelo perfecto para estudiar redes, pero TCP/IP es lo que realmente mueve Internet.\n\nRigid Foundation: X11’s network-based protocol became unchangeable due to backward compatibility, preventing modern optimizations\nPerformance Bottlenecks: Every graphics operation had to go through multiple layers (app → toolkit → X11 → server), creating unnecessary overhead for local applications\nHardware Evolution Mismatch: When GPUs emerged, X11’s software-rendering architecture couldn’t efficiently utilize new hardware acceleration\nExtension Hell: Adding modern features required bolt-on extensions (Composite, GLX, XRender) rather than clean integration, creating complexity\nLayer Lock-In: Applications built on X11 assumptions were hard to migrate to better architectures, requiring complete rewrites (hence Wayland’s slow adoption)"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#nivel-de-aplicación",
    "href": "ch1_p1_net_introduction.html#nivel-de-aplicación",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Nivel de Aplicación",
    "text": "Nivel de Aplicación\n\nEs el nivel en que desarrollamos aplicaciones.\n\n\n\nOSI (Capas 7, 6, 5)\n\nAplicación: HTTP, FTP, DNS\nPresentación: Cifrado, compresión\nSesión: Control de diálogos\n\n\nTCP/IP\n\nUna sola capa integrada\nProtocolos: HTTP/HTTPS, SMTP, FTP, DNS\nMás práctico"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#nivel-de-transporte",
    "href": "ch1_p1_net_introduction.html#nivel-de-transporte",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Nivel de Transporte",
    "text": "Nivel de Transporte\n\nGestiona la comunicación extremo a extremo entre aplicaciones.\n\nCapa 4 (ambos modelos)\n\n\nTCP\n\nComunicación confiable\nControl de flujo\nEntrega ordenada\nCorrección de errores\n\n\nUDP\n\nComunicación rápida\nSin garantías\nIdeal para tiempo real\nMenor overhead"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#nivel-de-redinternet",
    "href": "ch1_p1_net_introduction.html#nivel-de-redinternet",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Nivel de Red/Internet",
    "text": "Nivel de Red/Internet\n\nSe encarga de encontrar el mejor camino para enviar datos a través de múltiples redes. En otras palabras, se encarga del enrutamiento de paquetes.\n\nCapa 3 OSI / Capa Internet TCP/IP\nProtocolos:\n\nIP: Protocolo principal\nICMP: Control y errores\nARP: Resolución de direcciones\nOSPF, BGP: Protocolos de enrutamiento\n\n\n\n\n\n\n\nEjercicio\n\n\nPrueba a ejecutar ping www.google.es en tu terminal. ¿Qué ves?."
  },
  {
    "objectID": "ch1_p1_net_introduction.html#nivel-de-acceso-físico",
    "href": "ch1_p1_net_introduction.html#nivel-de-acceso-físico",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Nivel de Acceso Físico",
    "text": "Nivel de Acceso Físico\n\nControla cómo los datos se transmiten físicamente a través del medio de comunicación.\n\n\n\nOSI (Capas 2 y 1)\n\nEnlace: Control de errores, MAC\nFísica: Señales, voltajes\n\n\nTCP/IP\n\nCapa de Acceso a Red\nCombina ambas funciones\nEthernet, WiFi, etc."
  },
  {
    "objectID": "ch1_p1_net_introduction.html#métricas-principales",
    "href": "ch1_p1_net_introduction.html#métricas-principales",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Métricas Principales",
    "text": "Métricas Principales\n\n\nLatencia\n\nTiempo que tarda un paquete en llegar a su destino.\n“Velocidad del vehículo”\nMedida en ms\n\n\nThroughput\n\nDatos enviados por cantidad de tiempo.\n“Número de carriles”\nMedido en Mb/s o Gb/s\n\n\n\n⚠️ Nota: 1 MB/s = 8 Mb/s"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#throughput-vs-bandwidth",
    "href": "ch1_p1_net_introduction.html#throughput-vs-bandwidth",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Throughput vs Bandwidth",
    "text": "Throughput vs Bandwidth\n\n\nBandwidth\n\nCapacidad máxima teórica\nLímite físico del canal\nCondiciones ideales\n\n\nThroughput\n\nTransferencia real\nLimitado por el componente más lento\nCondiciones reales"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#latencia-vs-throughput",
    "href": "ch1_p1_net_introduction.html#latencia-vs-throughput",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Latencia vs Throughput",
    "text": "Latencia vs Throughput\nComparativa del efecto de la latencia y throughput en el tiempo para enviar una cantidad de datos.\n\n\n\nviewof settings = Inputs.form({\n  \"Tamaño total\": Inputs.range([50, 5000], {value: 200, step: 10, label: \"Tamaño total\"},),\n  \"Latencia A\": Inputs.range([1, 50], {value: 1, step: 0.1, label: \"Latencia (A)\"}),\n  \"Throughput A\": Inputs.range([1, 50], {value: 10, step: 1, label:\"Throughput (A)\"}),\n  \"Latencia B\": Inputs.range([1, 50], {value: 2, step: 0.1, label:\"Latencia (B)\"}),\n  \"Throughput B\": Inputs.range([1, 50], {value: 20, step: 1, label:\"Throughput B\"})\n})\n\n// Extraemos variables del formulario\ntotalData = settings[\"Tamaño total\"]\nlatencyA = settings[\"Latencia A\"]\nthroughputA = settings[\"Throughput A\"]\nlatencyB = settings[\"Latencia B\"]\nthroughputB = settings[\"Throughput B\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction progress(t, latency, throughput, total) {\n  if (t &lt; latency) return 0;\n  return Math.min(100, ((t - latency) * throughput / total) * 100);\n}\n\n// Reloj animado\ntime = {\n  let t0 = Date.now();\n  while (true) {\n    yield (Date.now() - t0) / 100; // en decimas de segundo\n    await Promises.tick(50);\n  }\n}\n\n// Tiempo máximo\nmaxTime = Math.max(latencyA + totalData/throughputA, latencyB + totalData/throughputB)\n\n// Progresos\nprogA = progress(time % maxTime, latencyA, throughputA, totalData)\nprogB = progress(time % maxTime, latencyB, throughputB, totalData)\n\n// Gráfico con Plot\nPlot.plot({\n  y: {domain: [0, 100], label: \"% completado\"},\n  x: {label: \"Tiempo (s)\"},\n  color: {legend: true, domain: [\"A\", \"B\"], range: [\"blue\", \"red\"]},\n  marks: [\n    Plot.line(d3.range(0, maxTime, 0.1).map(t =&gt; ({t, y: progress(t, latencyA, throughputA, totalData), series: \"A\"})), {x: \"t\", y: \"y\", stroke: \"series\"}),\n    Plot.line(d3.range(0, maxTime, 0.1).map(t =&gt; ({t, y: progress(t, latencyB, throughputB, totalData), series: \"B\"})), {x: \"t\", y: \"y\", stroke: \"series\"}),\n    Plot.dot([{t: time % maxTime, y: progA, series: \"A\"}], {x: \"t\", y: \"y\", fill: \"series\", r: 5}),\n    Plot.dot([{t: time % maxTime, y: progB, series: \"B\"}], {x: \"t\", y: \"y\", fill: \"series\", r: 5})\n  ]\n})"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#componentes-de-la-latencia",
    "href": "ch1_p1_net_introduction.html#componentes-de-la-latencia",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Componentes de la Latencia",
    "text": "Componentes de la Latencia\nd_{total} = \\textcolor{red}{d_{proc}} + \\textcolor{blue}{d_{queue}} + \\textcolor{green}{d_{prop}} + \\textcolor{orange}{d_{trans}}\n\ndproc: Procesamiento en router (microsegundos)\ndqueue: Espera en buffer (variable con tráfico)\ndprop: Propagación por el medio (d/s)\ndtrans: Transmisión de datos (L/R)"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#rtt",
    "href": "ch1_p1_net_introduction.html#rtt",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "RTT",
    "text": "RTT\n\nRTT (Round trip time): Tiempo total que tarda un paquete en ir desde el origen hasta el destino y volver de vuelta (ida + vuelta).\n\n\nLa latencia no tiene porque ser simétrica.\nGeneralmente la descarga es más rápida que la subida.\nPor lo tanto, el RTT es un valor muy importante en aplicaciones interactivas."
  },
  {
    "objectID": "ch1_p1_net_introduction.html#comparación-fibra-vs-5g",
    "href": "ch1_p1_net_introduction.html#comparación-fibra-vs-5g",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Comparación: Fibra vs 5G",
    "text": "Comparación: Fibra vs 5G\n\n\n\nFactor\nFibra Óptica\n5G\n\n\n\n\nPropagación\n67% velocidad luz\n100% velocidad luz\n\n\nProcesamiento\n~0.1ms/salto\n~4ms (estación radio)\n\n\nCola\nBaja congestión\nAlta congestión\n\n\nTransmisión\nHasta 10 Gb/s\n&lt; 1 Gb/s\n\n\n\nResultado: Fibra generalmente más rápida y estable"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#jitter-variabilidad-de-latencia",
    "href": "ch1_p1_net_introduction.html#jitter-variabilidad-de-latencia",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Jitter: Variabilidad de Latencia",
    "text": "Jitter: Variabilidad de Latencia\n\nJitter: Variación en el tiempo de llegada de los paquetes que causa inconsistencia en la comunicación.\n\nEjemplo comparativo\n\n\nEscenario 1 (Bajo jitter):\n\nPaquetes: 50, 52, 48, 51 ms\nPromedio: 50.25 ms\nVariación: 1.48 ms ✅\n\n\nEscenario 2 (Alto jitter):\n\nPaquetes: 28, 68, 43, 62 ms\nPromedio: 50.25 ms\nVariación: 15.82 ms ❌\n\n\nImpacto: Voz entrecortada, saltos en video, degradación en juegos"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#requisitos-para-videojuegos",
    "href": "ch1_p1_net_introduction.html#requisitos-para-videojuegos",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Requisitos para Videojuegos",
    "text": "Requisitos para Videojuegos\nRTT máximo tolerado\n\n\n\nGénero\nTolerancia\nEjemplo\n\n\n\n\nFighting\n16-50ms\nStreet Fighter\n\n\nFPS Competitivo\n20-50ms\nCounter-Strike\n\n\nRacing\n50-100ms\nGran Turismo\n\n\nRTS\n100-200ms\nStarCraft\n\n\nMMORPG\nVariable\nWorld of Warcraft\n\n\nTurn-based\n500ms+\nCivilization"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#pérdida-de-paquetes",
    "href": "ch1_p1_net_introduction.html#pérdida-de-paquetes",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Pérdida de Paquetes",
    "text": "Pérdida de Paquetes\nCausas principales\n\nCongestión: Buffers llenos en routers\nCorrupción: Interferencias electromagnéticas\nRadiación cósmica: ~1 error/256MB/día\n\nSoluciones\n\nProtocolos de capas superiores (TCP)\nRetransmisión automática\nCódigos de corrección de errores\nInterpolar la información"
  },
  {
    "objectID": "ch1_p1_net_introduction.html#resumen",
    "href": "ch1_p1_net_introduction.html#resumen",
    "title": "Introducción a las Redes de Ordenadores",
    "section": "Resumen",
    "text": "Resumen\n\nInternet es un sistema distribuido y descentralizado\nEvolución desde 4 hosts (1969) a &gt;100B dispositivos (2025)\nInfraestructura jerárquica: PAN → LAN → MAN → WAN → Internet\nModelos de capas: OSI (teórico) vs TCP/IP (práctico)\nRendimiento: Balance entre latencia y throughput\nAplicaciones críticas: Videojuegos requieren &lt;50ms para competitivo"
  },
  {
    "objectID": "ch1_p5_application.html#qué-es-la-capa-de-aplicación",
    "href": "ch1_p5_application.html#qué-es-la-capa-de-aplicación",
    "title": "Capa de Aplicación",
    "section": "¿Qué es la Capa de Aplicación?",
    "text": "¿Qué es la Capa de Aplicación?\n\nLa capa de aplicación define los protocolos que utilizarán las aplicaciones para intercambiar datos\n\n\n\n¿Qué hace?\n\nDefine protocolos para intercambio de datos\nSe centra en comunicación entre procesos\nPermite crear protocolos propios\nOpera sobre la capa de transporte\n\n\nPosición en el modelo TCP/IP:\n\n\n\n\n\n\nblock-beta\n    columns 1\n    \n    A[\"&lt;b&gt;Capa de Aplicación&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;HTTP, HTTPS, FTP, SMTP&lt;br/&gt;DNS, DHCP, SSH, IMAP, POP\"]\n    \n    B[\"&lt;b&gt;Capa de Transporte&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;TCP, UDP&lt;br/&gt;Control de flujo y errores\"]\n    \n    C[\"&lt;b&gt;Capa de Internet&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;IP, ICMP, ARP&lt;br/&gt;Enrutamiento, Direccionamiento\"]\n    \n    D[\"&lt;b&gt;Capa de Acceso a la Red&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Ethernet, WiFi, PPP&lt;br/&gt;Frames, MAC Address\"]\n    \n    classDef highlight fill:#ff9999,stroke:#cc0000,stroke-width:4px,color:#000\n    classDef normal fill:#e1f5fe,stroke:#0277bd,stroke-width:2px,color:#000\n    \n    class A highlight\n    class B,C,D normal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportante\n\n\nConcepto clave: Podemos crear nuestros propios protocolos que se ejecuten a nivel de capa de aplicación"
  },
  {
    "objectID": "ch1_p5_application.html#ejemplo-protocolo-echo",
    "href": "ch1_p5_application.html#ejemplo-protocolo-echo",
    "title": "Capa de Aplicación",
    "section": "Ejemplo: Protocolo Echo",
    "text": "Ejemplo: Protocolo Echo\nServidor Echo (JavaScript)\nconst net = require('net');\n\nfunction echoServer() {\n    const server = net.createServer();\n    \n    server.on('connection', (socket) =&gt; {\n        const clientAddress = `${socket.remoteAddress}:${socket.remotePort}`;\n        console.log(`Client connected: ${clientAddress}`);\n        handleClient(socket, clientAddress);\n    });\n    \n    server.listen(8888, () =&gt; {\n        console.log('Echo server listening on localhost:8888');\n    });\n}\n\nfunction handleClient(socket, clientAddress) {\n    socket.on('data', (data) =&gt; {\n        const message = data.toString('utf-8').trim();\n        if (message.toLowerCase() === 'quit') {\n            socket.end();\n            return;\n        }\n        socket.write(`Echo: ${message}`);\n    });\n}"
  },
  {
    "objectID": "ch1_p5_application.html#ejemplo-cliente-echo",
    "href": "ch1_p5_application.html#ejemplo-cliente-echo",
    "title": "Capa de Aplicación",
    "section": "Ejemplo: Cliente Echo",
    "text": "Ejemplo: Cliente Echo\nCliente Echo (Python)\nimport socket\n\ndef echo_client():\n    \"\"\"Interactive echo client\"\"\"\n    \n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect(('localhost', 8888))\n    \n    while True:\n        message = input(\"Enter message: \")\n        \n        if message.lower() == 'quit':\n            client_socket.send(message.encode('utf-8'))\n            break\n        \n        client_socket.send(message.encode('utf-8'))\n        response = client_socket.recv(1024).decode('utf-8')\n        print(f\"Server response: {response}\")\n    \n    client_socket.close()\n\n\n\n\n\n\nTip\n\n\nLa comunicación puede ser entre procesos en diferentes máquinas e independiente del lenguaje de programación"
  },
  {
    "objectID": "ch1_p5_application.html#conceptos-clave",
    "href": "ch1_p5_application.html#conceptos-clave",
    "title": "Capa de Aplicación",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nProtocolos de capa de aplicación: Definen cómo las aplicaciones intercambian datos\nArquitectura de aplicaciones en red: Cliente-servidor, P2P, híbrida\nSockets: Interfaz entre capa de aplicación y capa de transporte"
  },
  {
    "objectID": "ch1_p5_application.html#qué-son-los-sockets",
    "href": "ch1_p5_application.html#qué-son-los-sockets",
    "title": "Capa de Aplicación",
    "section": "¿Qué son los Sockets?",
    "text": "¿Qué son los Sockets?\n\nLos sockets son la interfaz de programación que permite a las aplicaciones comunicarse con la capa de transporte\n\n\n\nCaracterísticas:\n\nPunto de conexión bidireccional\nAbstracción de detalles de bajo nivel\nAPI introducida en BSD4.1 UNIX (1981)\nBasada en paradigma cliente/servidor\n\n\nIdentificación de procesos:\nPara identificar un proceso necesitamos:\n\nIP del host: Dirección única (32 bits IPv4)\nNúmero de puerto: Asociado al proceso\n\nEjemplos de puertos:\n\nHTTP: 80\nHTTPS: 443\nDNS: 53"
  },
  {
    "objectID": "ch1_p5_application.html#sockets-tcp",
    "href": "ch1_p5_application.html#sockets-tcp",
    "title": "Capa de Aplicación",
    "section": "Sockets TCP",
    "text": "Sockets TCP\nCaracterísticas principales\n\n\nPropiedades:\n\nOrientado a conexión\nConfiabilidad garantizada\nControl de flujo\nControl de congestión\nFull-duplex\n\n\nProceso:\n\nEstablecer conexión\nIntercambiar datos\nCerrar conexión\n\nRequiere conexión explícita antes del intercambio"
  },
  {
    "objectID": "ch1_p5_application.html#creación-de-servidor-tcp",
    "href": "ch1_p5_application.html#creación-de-servidor-tcp",
    "title": "Capa de Aplicación",
    "section": "Creación de Servidor TCP",
    "text": "Creación de Servidor TCP\nPaso 1: Crear y escuchar\nconst net = require('net');\n\n// Crear servidor TCP\nconst server = net.createServer();\n\n// Configurar el servidor para escuchar en puerto 8888\nserver.listen(8888, 'localhost', () =&gt; {\n    console.log('Servidor TCP escuchando en localhost:8888');\n});\nPaso 2: Manejar conexiones\n// Manejar nuevas conexiones\nserver.on('connection', (socket) =&gt; {\n    console.log('Cliente conectado:', socket.remoteAddress);\n    \n    // Manejar datos recibidos\n    socket.on('data', (data) =&gt; {\n        // Procesar datos\n    });\n    \n    // Manejar cierre de conexión\n    socket.on('close', () =&gt; {\n        console.log('Cliente desconectado');\n    });\n});"
  },
  {
    "objectID": "ch1_p5_application.html#cliente-tcp",
    "href": "ch1_p5_application.html#cliente-tcp",
    "title": "Capa de Aplicación",
    "section": "Cliente TCP",
    "text": "Cliente TCP\nEstablecer conexión y comunicar\nconst net = require('net');\n\n// Crear socket TCP\nconst socket = new net.Socket();\n\n// Conectar al servidor\nsocket.connect(8888, 'localhost', () =&gt; {\n    console.log('Conectado al servidor TCP');\n});\n\n// Enviar datos\nsocket.write('Hola servidor');\n\n// Recibir respuesta\nsocket.on('data', (data) =&gt; {\n    console.log('Respuesta:', data.toString());\n});\n\n// Cerrar conexión\nsocket.close();"
  },
  {
    "objectID": "ch1_p5_application.html#sockets-udp",
    "href": "ch1_p5_application.html#sockets-udp",
    "title": "Capa de Aplicación",
    "section": "Sockets UDP",
    "text": "Sockets UDP\nCaracterísticas principales\n\n\nPropiedades:\n\nSin conexión\nMejor esfuerzo\nBaja latencia\nSimplicidad\nBroadcast/Multicast nativo\n\n\nVentajas:\n\nMenor overhead que TCP\nIdeal para tiempo real\nNo requiere establecer conexión\n\nDesventajas:\n\nNo garantiza entrega\nNo garantiza orden"
  },
  {
    "objectID": "ch1_p5_application.html#servidor-y-cliente-udp",
    "href": "ch1_p5_application.html#servidor-y-cliente-udp",
    "title": "Capa de Aplicación",
    "section": "Servidor y Cliente UDP",
    "text": "Servidor y Cliente UDP\nServidor UDP\nconst dgram = require('dgram');\nconst server = dgram.createSocket('udp4');\n\nserver.bind(8888, 'localhost', () =&gt; {\n    console.log('Servidor UDP escuchando en localhost:8888');\n});\n\nserver.on('message', (msg, rinfo) =&gt; {\n    console.log(`Mensaje de ${rinfo.address}:${rinfo.port}`);\n    // Responder al cliente\n    server.send('Respuesta', rinfo.port, rinfo.address);\n});\nCliente UDP\nconst dgram = require('dgram');\nconst client = dgram.createSocket('udp4');\n\nclient.send('Hola servidor UDP', 8888, 'localhost', (err) =&gt; {\n    if (err) throw err;\n    console.log('Mensaje enviado');\n});\n\nclient.on('message', (msg, rinfo) =&gt; {\n    console.log('Respuesta recibida:', msg.toString());\n});"
  },
  {
    "objectID": "ch1_p5_application.html#servicios-requeridos-por-aplicaciones",
    "href": "ch1_p5_application.html#servicios-requeridos-por-aplicaciones",
    "title": "Capa de Aplicación",
    "section": "Servicios Requeridos por Aplicaciones",
    "text": "Servicios Requeridos por Aplicaciones\nRequisitos de las aplicaciones de red\n\n\n\n\n\n\n\n\n\n\n\nAplicación\nConfiabilidad\nTemporización\nAncho de Banda\nSeguridad\nProtocolo\n\n\n\n\nTransferencia archivos\nSí\nNo crítica\nElástica\nSegún contenido\nTCP\n\n\nCorreo electrónico\nSí\nNo crítica\nElástica\nSí\nTCP\n\n\nNavegación web\nSí\nModerada\nElástica\nSí (HTTPS)\nUDP / TCP\n\n\nStreaming video\nTolerante\nCrítica\nMínima garantizada\nSegún contenido\nUDP/TCP\n\n\nJuegos tiempo real\nTolerante\nMuy crítica\nModerada\nSí\nUDP\n\n\nVideoconferencia\nTolerante\nCrítica\nMínima garantizada\nSí\nUDP/TCP\n\n\n\n\n\n\n\n\n\nTip\n\n\nHTTP/3 utiliza QUIC sobre UDP, añadiendo confiabilidad en la capa de aplicación"
  },
  {
    "objectID": "ch1_p5_application.html#tipos-de-arquitecturas",
    "href": "ch1_p5_application.html#tipos-de-arquitecturas",
    "title": "Capa de Aplicación",
    "section": "Tipos de Arquitecturas",
    "text": "Tipos de Arquitecturas\n\nLas arquitecturas indican cómo se conectan los nodos y cuál es el rol de cada uno\n\n\n\nCliente-Servidor\n\nServidor siempre activo\nIP fija conocida\nClientes no se comunican entre sí\nCentralización de recursos\n\n\nPeer-to-Peer\n\nNodos se conectan entre sí\nSin servidor central\nFuncionalidad distribuida\nEjemplo: BitTorrent\n\n\nHíbrida\n\nMezcla de ambas\nAutoridades centrales\nFuncionalidades distribuidas\nMás común que P2P puro"
  },
  {
    "objectID": "ch1_p5_application.html#arquitectura-cliente-servidor",
    "href": "ch1_p5_application.html#arquitectura-cliente-servidor",
    "title": "Capa de Aplicación",
    "section": "Arquitectura Cliente-Servidor",
    "text": "Arquitectura Cliente-Servidor\nCaracterísticas fundamentales\n\n\nModelo de funcionamiento:\n\nCliente inicia comunicación\nServidor procesa petición\nServidor envía respuesta\nCliente procesa respuesta\n\nVentajas:\n\nCentralización de recursos\nFacilita mantenimiento\nMayor seguridad\nConsistencia del sistema\n\n\nRequerimientos del servidor:\n\nDirección IP fija\nAlta disponibilidad\nCapacidad de múltiples conexiones\nCentros de datos\nBalanceamiento de carga\nRedundancia\n\nEjemplos:\n\nNetflix, Spotify\nInstagram, Gmail\nServicios web en general"
  },
  {
    "objectID": "ch1_p5_application.html#cliente-servidor-en-videojuegos",
    "href": "ch1_p5_application.html#cliente-servidor-en-videojuegos",
    "title": "Capa de Aplicación",
    "section": "Cliente-Servidor en Videojuegos",
    "text": "Cliente-Servidor en Videojuegos\nImplementación en juegos multijugador\n\n\nArquitectura típica:\n\nServidor mantiene estado autoritativo\nClientes manejan presentación visual\nServidor valida todas las acciones\nPrevención de trampas centralizada\n\nEjemplos:\n\nWorld of Warcraft\nCounter-Strike: GO\nLeague of Legends\nFortnite Battle Royale\n\n\nProblemas comunes:\n\nLatencia/Lag: Tiempo de procesamiento\nSincronización: Orden de acciones\nServidores sobrecargados: Lanzamientos\nPérdida de conexión: Penalizaciones\nCostos de infraestructura: Millones en servidores\n\nSoluciones: Predicción cliente, interpolación, CDNs"
  },
  {
    "objectID": "ch1_p5_application.html#arquitectura-peer-to-peer",
    "href": "ch1_p5_application.html#arquitectura-peer-to-peer",
    "title": "Capa de Aplicación",
    "section": "Arquitectura Peer-to-Peer",
    "text": "Arquitectura Peer-to-Peer\nFuncionamiento y características\n\n\nPrincipios:\n\nCada peer es cliente y servidor\nSin entidad central\nAutoescalable\nRecursos compartidos\nUnión/salida libre\n\nClasificación por pureza:\n\nCentralizados (Napster, BitTorrent)\nDescentralizados (Freenet, Gnutella)\n\n\nAplicaciones comunes:\n\nBitTorrent (archivos)\nBitcoin (criptomonedas)\nIPFS (contenido distribuido)\nSkype original (VoIP)\nTox, Briar (mensajería)\n\nEn videojuegos:\n\nJuegos de lucha (Street Fighter 6)\nCooperativos (Portal 2, It Takes Two)"
  },
  {
    "objectID": "ch1_p5_application.html#topologías-p2p",
    "href": "ch1_p5_application.html#topologías-p2p",
    "title": "Capa de Aplicación",
    "section": "Topologías P2P",
    "text": "Topologías P2P\n\n\n\n\n\n\n\n\ngraph TD\n    P1((Peer 1))\n    P2((Peer 2))\n    P3((Peer 3))\n    P4((Peer 4))\n    P5((Peer 5))\n    \n    P1 --- P2\n    P1 --- P3\n    P1 --- P4\n    P1 --- P5\n    P2 --- P3\n    P2 --- P4\n    P2 --- P5\n    P3 --- P4\n    P3 --- P5\n    P4 --- P5\n\n    classDef peerNode fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef hubNode fill:#fff3e0,stroke:#e65100,stroke-width:3px\n\n    class P1,P2,P3,P4,P5 peerNode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngraph TD   \n    R1((Peer 1))\n    R2((Peer 2))\n    R3((Peer 3))\n    R4((Peer 4))\n    R5((Peer 5))\n    \n    R1 --- R2\n    R2 --- R3\n    R3 --- R4\n    R4 --- R5\n    R5 --- R1\n\n    classDef peerNode fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n\n    class R1,R2,R3,R4,R5 peerNode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngraph TD\n    S1((Host/Hub))\n    S2((Peer 2))\n    S3((Peer 3))\n    S4((Peer 4))\n    S5((Peer 5))\n    \n    S1 --- S2\n    S1 --- S3\n    S1 --- S4\n    S1 --- S5\n\n    classDef peerNode fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef hubNode fill:#fff3e0,stroke:#e65100,stroke-width:3px\n\n    class S2,S3,S4,S5 peerNode\n    class S1 hubNode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngraph TD\n    H1((Hub))\n    H2((Peer 2))\n    H3((Peer 3))\n    H4((Peer 4))\n    H5((Peer 5))\n    H6((Peer 6))\n    \n    H1 --- H2\n    H1 --- H3\n    H2 --- H3\n    H4 --- H5\n    H4 --- H6\n    H5 --- H6\n    H3 --- H4\n    \n    classDef peerNode fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef hubNode fill:#fff3e0,stroke:#e65100,stroke-width:3px\n    \n    class H2,H3,H4,H5,H6 peerNode\n    class H1 hubNode\n\n\n\n\n\n\n\n\n\n\nFull Mesh: Máxima redundancia, no escalable\n\nRing: Eficiente, vulnerable a fallos\n\nStar: Pseudo-P2P, punto único de falla\n\nHybrid: Combina ventajas de diferentes topologías"
  },
  {
    "objectID": "ch1_p5_application.html#http---hypertext-transfer-protocol",
    "href": "ch1_p5_application.html#http---hypertext-transfer-protocol",
    "title": "Capa de Aplicación",
    "section": "HTTP - HyperText Transfer Protocol",
    "text": "HTTP - HyperText Transfer Protocol\nFundamentos\n\n\nCaracterísticas:\n\nProtocolo para transferencia en WWW\nTexto legible en comandos y respuestas\nPuerto 80 (HTTP) / 443 (HTTPS)\nModelo cliente-servidor\nSin estado (stateless)\n\nURL estructura:\nhttps://www.ejemplo.com/pagina.html\n\nProtocolo: https\nHost: www.ejemplo.com\nRecurso: /pagina.html\n\n\nVerbos HTTP:\n\nGET: Obtener recurso (idempotente)\nPOST: Enviar datos (cambia estado)\nHEAD: Como GET sin cuerpo\nPUT: Cargar objeto (idempotente)\nDELETE: Borrar recurso\n\nCódigos de respuesta:\n\n1XX: Informativa\n2XX: Éxito (200 OK)\n3XX: Redirección (301 Moved)\n4XX: Error cliente (404 Not Found)\n5XX: Error servidor (500 Internal)"
  },
  {
    "objectID": "ch1_p5_application.html#evolución-de-http",
    "href": "ch1_p5_application.html#evolución-de-http",
    "title": "Capa de Aplicación",
    "section": "Evolución de HTTP",
    "text": "Evolución de HTTP\nConexiones persistentes vs no persistentes\n\n\n\n\n\n\n\nsequenceDiagram\n    participant C as Cliente (Navegador)\n    participant S as Servidor Web\n    Note over C,S: HTTP/1.0 - No persistente\n    C-&gt;&gt;S: 1. SYN - Establecer conexión TCP\n    S-&gt;&gt;C: 2. SYN-ACK - Confirmar conexión\n    C-&gt;&gt;S: 3. ACK - Conexión establecida\n    \n    C-&gt;&gt;S: 4. GET /index.html HTTP/1.0\n    S-&gt;&gt;C: 5. HTTP/1.0 200 OK + contenido HTML\n    \n    C-&gt;&gt;S: 6. FIN - Cerrar conexión TCP\n    S-&gt;&gt;C: 7. FIN-ACK - Confirmar cierre\n    C-&gt;&gt;S: 8. ACK - Conexión cerrada\n\n    Note over C,S: Nueva conexión para segundo recurso\n    C-&gt;&gt;S: 9. SYN - Nueva conexión TCP\n    S-&gt;&gt;C: 10. SYN-ACK\n    C-&gt;&gt;S: 11. ACK\n    \n    C-&gt;&gt;S: 12. GET /imagen.jpg HTTP/1.0\n    S-&gt;&gt;C: 13. HTTP/1.0 200 OK + imagen\n    \n    Note over C,S: Tiempo total: 4 RTT + transferencia\n\n\n\n\n\n\n\n\n\n\n\n\nsequenceDiagram\n    participant C as Cliente (Navegador)\n    participant S as Servidor Web\n    \n    Note over C,S: HTTP/1.1+ - Persistente\n    C-&gt;&gt;S: 1. SYN - Establecer conexión TCP\n    S-&gt;&gt;C: 2. SYN-ACK - Confirmar conexión\n    C-&gt;&gt;S: 3. ACK - Conexión establecida\n    \n    C-&gt;&gt;S: 4. GET /index.html HTTP/1.1&lt;br/&gt;Connection: keep-alive\n    S-&gt;&gt;C: 5. HTTP/1.1 200 OK&lt;br/&gt;+ contenido HTML\n        \n    C-&gt;&gt;S: 6. GET /imagen.jpg HTTP/1.1&lt;br/&gt;Connection: keep-alive\n    S-&gt;&gt;C: 7. HTTP/1.1 200 OK&lt;br/&gt;+ imagen\n    \n    Note over C,S: Más recursos pueden solicitarse...\n    \n    C-&gt;&gt;S: 8. Connection: close (cuando termine)    \n    Note over C,S: Tiempo total: 1 RTT + transferencia\n\n\n\n\n\n\n\n\nHTTP/1.0: 2 RTT por objeto, nueva conexión cada vez\nHTTP/1.1: 1 RTT por objeto, conexión persistente\nHTTP/2: Múltiples streams independientes\nHTTP/3: Sobre QUIC (UDP)"
  },
  {
    "objectID": "ch1_p5_application.html#cookies-http",
    "href": "ch1_p5_application.html#cookies-http",
    "title": "Capa de Aplicación",
    "section": "Cookies HTTP",
    "text": "Cookies HTTP\nMecanismo de estado en protocolo sin estado\n\n\nFuncionamiento:\n\nPares clave-valor en cliente\nSe configuran en respuesta HTTP\nFecha de expiración\nDominio del servidor\n\nTipos:\n\nPropias: De la web navegada\nTerceros: Servicios externos\nPermanentes: Sin expiración\nSesión: Expiran al cerrar\n\n\nUsos principales:\n\nMantener sesiones\nPersonalización\nAnálisis de uso\nPublicidad dirigida\n\nSeguridad:\n\nDominio específico\nEvitar suplantaciones\nHTTPS only cookies"
  },
  {
    "objectID": "ch1_p5_application.html#dns---domain-name-system",
    "href": "ch1_p5_application.html#dns---domain-name-system",
    "title": "Capa de Aplicación",
    "section": "DNS - Domain Name System",
    "text": "DNS - Domain Name System\nSistema de nombres de dominio\n\n\nObjetivo:\nTraducir nombres a direcciones IP - www.google.es → 142.250.200.67\nJerarquía de servidores:\n\nServidores raíz: 13 lógicos (A-M)\nServidores TLD: .com, .org, .es\nServidores autoritativos: Info definitiva\nServidores locales: Recursivos/resolvers\n\n\nProceso de resolución:\n\nVerificar caché local\nConsulta a DNS local\nDNS local → Servidor raíz\nRaíz → Servidor TLD\nTLD → Servidor autoritativo\nAutoritativo → IP final\nRespuesta al cliente\n\nSistema distribuido sin servidor central"
  },
  {
    "objectID": "ch1_p5_application.html#proceso-dns---ejemplo",
    "href": "ch1_p5_application.html#proceso-dns---ejemplo",
    "title": "Capa de Aplicación",
    "section": "Proceso DNS - Ejemplo",
    "text": "Proceso DNS - Ejemplo\n\n\n\n\n\n\nsequenceDiagram\n    participant Cliente as Cliente/SO\n    participant Local as Servidor DNS Local&lt;br/&gt;(Recursivo)\n    participant Raiz as Servidor Raíz\n    participant TLD as Servidor TLD&lt;br/&gt;(.es)\n    participant Auth as Servidor Autoritativo\n\n    Note over Cliente: Ejemplo: www.google.es\n    \n    Cliente-&gt;&gt;Cliente: 1. Verifica caché local del SO\n    alt No está en caché local\n        Cliente-&gt;&gt;Local: 2. Consulta DNS: ¿IP de www.google.es?\n        \n        Local-&gt;&gt;Local: Verifica caché DNS local\n        alt No está en caché DNS\n            Local-&gt;&gt;Raiz: 3. ¿Quién maneja .es?\n            Raiz-&gt;&gt;Local: 4. Servidor TLD para .es: [IP_TLD]\n            \n            Local-&gt;&gt;TLD: 5. ¿Quién maneja google.es?\n            TLD-&gt;&gt;Local: 6. Servidor autoritativo: [IP_AUTH]\n            \n            Local-&gt;&gt;Auth: 7. ¿IP de www.google.es?\n            Auth-&gt;&gt;Local: 8. IP: 142.250.200.67\n        end\n        \n        Local-&gt;&gt;Cliente: 9. Respuesta: 142.250.200.67\n    end\n    \n    Note over Cliente,Auth: El cliente ahora puede conectarse&lt;br/&gt;directamente a 142.250.200.67"
  },
  {
    "objectID": "ch1_p5_application.html#protocolos-de-correo",
    "href": "ch1_p5_application.html#protocolos-de-correo",
    "title": "Capa de Aplicación",
    "section": "Protocolos de Correo",
    "text": "Protocolos de Correo\nSMTP, IMAP y POP\n\n\nSMTP\nFunción: Envío de correos\n\nProtocolo “push”\nTransporta mensajes\nNo maneja recepción\nPuerto 25/587\n\n\nPOP3\nFunción: Descarga de correos\n\nDescarga completa\nElimina del servidor\nUn solo dispositivo\nPuerto 110/995\n\n\nIMAP\nFunción: Acceso sincronizado\n\nMensajes en servidor\nMulti-dispositivo\nCarpetas y etiquetas\nPuerto 143/993"
  },
  {
    "objectID": "ch1_p5_application.html#quic",
    "href": "ch1_p5_application.html#quic",
    "title": "Capa de Aplicación",
    "section": "QUIC",
    "text": "QUIC\nProtocolo moderno sobre UDP\n\n\nVentajas principales:\n\nMultiplexado sin head-of-line blocking\nEstablecimiento 0-RTT\nMigración de conexión transparente\nControl de congestión mejorado\nForward Error Correction\n\nDesarrollado por:\n\nGoogle (2012)\nEstandarizado IETF (2021)\nRFC 9000\n\n\nAdopción 2025:\n\n8.2% de sitios web usan QUIC\n31.1% usan HTTP/3\nYouTube reduce 30% tiempo de carga\n\nCasos de uso:\n\nStreaming\nVideoconferencia\nJuegos en línea\nPlataformas de contenido\n\n\n\n\n\n\n\n\nTip\n\n\nQUIC combina lo mejor de TCP con seguridad TLS 1.3 integrada, eliminando limitaciones históricas"
  },
  {
    "objectID": "ch1_p5_application.html#cdns---content-delivery-networks",
    "href": "ch1_p5_application.html#cdns---content-delivery-networks",
    "title": "Capa de Aplicación",
    "section": "CDNs - Content Delivery Networks",
    "text": "CDNs - Content Delivery Networks\nFuncionamiento y beneficios\n\n\n¿Cómo funcionan?\n\nRed distribuida de servidores edge\nCopias de contenido cerca del usuario\nEnrutamiento inteligente automático\nReduce latencia: 200-500ms → &lt;50ms\n\nEstrategias de caché:\n\nEstático: Días/semanas (imágenes, videos)\nDinámico: Minutos/horas (APIs)\nPersonalizado: Cache parcial\nStreaming: Segmentos individuales\n\n\nServicios adicionales:\n\nCompresión automática\nConversión de formatos\nBalanceo de carga\nProtección DDoS\nPre-carga predictiva\nEjecución edge computing\n\nEn videojuegos:\n\nDescarga de actualizaciones\nAssets y contenido\nReducción de carga en servidores origen"
  },
  {
    "objectID": "ch1_p5_application.html#servidores-proxy",
    "href": "ch1_p5_application.html#servidores-proxy",
    "title": "Capa de Aplicación",
    "section": "Servidores Proxy",
    "text": "Servidores Proxy\nIntermediarios inteligentes\n\n\nFuncionamiento:\n\nCliente envía petición a proxy\nProxy analiza petición\nSi puede resolver → responde\nSi no → consulta servidor origen\nCachea respuesta\nEnvía al cliente\n\nUbicación típica:\n\nCache local (navegador)\nISP\nCDNs\n\n\nVentajas:\n\nNavegación más rápida\nReduce tráfico de red\nSeguridad adicional\nAnonimato\nControl de acceso\n\nGET condicional:\n\nSolo devuelve si hay cambios\nAhorra ancho de banda\nReduce tiempo de respuesta"
  },
  {
    "objectID": "ch1_p5_application.html#puntos-clave",
    "href": "ch1_p5_application.html#puntos-clave",
    "title": "Capa de Aplicación",
    "section": "Puntos Clave",
    "text": "Puntos Clave\n\nLa Capa de Aplicación define protocolos para intercambio de datos entre procesos\nSockets: Interfaz entre aplicación y transporte (TCP confiable vs UDP rápido)\nArquitecturas: Cliente-servidor (centralizado), P2P (distribuido), Híbrida\nHTTP: Protocolo web sin estado, evolución de 1.0 a HTTP/3 sobre QUIC\nDNS: Sistema distribuido jerárquico para traducir nombres a IPs\nCorreo: SMTP (envío), POP (descarga), IMAP (sincronización)\nQUIC: Protocolo moderno sobre UDP con ventajas de TCP + TLS\nCDNs: Redes de distribución que acercan contenido a usuarios\nPodemos crear protocolos propios en esta capa"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Juegos en Red",
    "section": "",
    "text": "Introducción a la asignatura\n\n\n\n\n\nIntroducción a las redes de computadores\nCapa de acceso a la red\nCapa de red\nCapa de transporte\nCapa de aplicación"
  },
  {
    "objectID": "index.html#introducción",
    "href": "index.html#introducción",
    "title": "Juegos en Red",
    "section": "",
    "text": "Introducción a la asignatura"
  },
  {
    "objectID": "index.html#redes-de-computadores",
    "href": "index.html#redes-de-computadores",
    "title": "Juegos en Red",
    "section": "",
    "text": "Introducción a las redes de computadores\nCapa de acceso a la red\nCapa de red\nCapa de transporte\nCapa de aplicación"
  },
  {
    "objectID": "ch1_p2_access_layer.html#qué-es-la-capa-de-acceso-a-la-red",
    "href": "ch1_p2_access_layer.html#qué-es-la-capa-de-acceso-a-la-red",
    "title": "Capa de Acceso a la Red",
    "section": "¿Qué es la Capa de Acceso a la Red?",
    "text": "¿Qué es la Capa de Acceso a la Red?\n\nLa Capa de Acceso a la Red se encarga de la transmisión física de datos entre dispositivos directamente conectados en una red local\n\n\n\n¿Qué hace?\n\nManeja los aspectos físicos de la transmisión\nControla el acceso al medio compartido\nSe ejecuta en el host y en el nucleo de la red\nGarantiza transmisión confiable entre nodos adyacentes\n\n\nPosición en los modelos:\n\n\n\n\n\n\nblock-beta\n    columns 1\n    \n    A[\"&lt;b&gt;Capa de Aplicación&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;HTTP, HTTPS, FTP, SMTP&lt;br/&gt;DNS, DHCP, Telnet, SSH\"]\n    \n    B[\"&lt;b&gt;Capa de Transporte&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;TCP, UDP&lt;br/&gt;Control de flujo y errores\"]\n    \n    C[\"&lt;b&gt;Capa de Internet&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;IP, ICMP, ARP&lt;br/&gt;Enrutamiento, Direccionamiento\"]\n    \n    D[\"&lt;b&gt;Capa de Acceso a la Red&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Ethernet, WiFi, PPP&lt;br/&gt;Frames, MAC Address&lt;br/&gt;Control de acceso al medio\"]\n    \n    classDef highlight fill:#ff9999,stroke:#cc0000,stroke-width:4px,color:#000\n    classDef normal fill:#e1f5fe,stroke:#0277bd,stroke-width:2px,color:#000\n    \n    class D highlight\n    class A,B,C normal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportante\n\n\nResponsabilidad principal: Garantizar que los datos puedan transmitirse de manera confiable entre nodos adyacentes en la red"
  },
  {
    "objectID": "ch1_p2_access_layer.html#ejemplo-comunicación-en-red-local",
    "href": "ch1_p2_access_layer.html#ejemplo-comunicación-en-red-local",
    "title": "Capa de Acceso a la Red",
    "section": "Ejemplo: Comunicación en Red Local",
    "text": "Ejemplo: Comunicación en Red Local\n\n\n\n\n\n\nsequenceDiagram\n    participant A as Computadora A&lt;br/&gt;(00:1A:2B:3C:4D:5E)\n    participant S as Switch&lt;br/&gt;(Tabla MAC)\n    participant C as Computadora C&lt;br/&gt;(00:3C:4D:5E:6F:70)\n\n    Note over S: Tabla MAC vacía\n\n    Note over A,C: FASE 1: Descubrimiento ARP\n    \n    A-&gt;&gt;S: ARP Request&lt;br/&gt;¿Quién tiene la IP de C?&lt;br/&gt;Destino: Broadcast\n    \n    Note over S: Aprende: Puerto 1 → MAC de A\n    \n    S-&gt;&gt;C: ARP Request (Flooding)\n    \n    C-&gt;&gt;S: ARP Response&lt;br/&gt;Mi MAC es 00:3C:4D:5E:6F:70\n    \n    Note over S: Aprende: Puerto 3 → MAC de C\n    \n    S-&gt;&gt;A: ARP Response (Unicast)\n\n    Note over A,C: FASE 2: Comunicación Directa\n    \n    A-&gt;&gt;S: Datos para C\n    \n    Note over S: Consulta tabla MAC\n    \n    S-&gt;&gt;C: Datos (Solo puerto 3)"
  },
  {
    "objectID": "ch1_p2_access_layer.html#control-de-acceso-al-medio-mac",
    "href": "ch1_p2_access_layer.html#control-de-acceso-al-medio-mac",
    "title": "Capa de Acceso a la Red",
    "section": "1. Control de Acceso al Medio (MAC)",
    "text": "1. Control de Acceso al Medio (MAC)\n\nCoordina cómo múltiples dispositivos comparten un medio de transmisión común\n\n\n\nEthernet Half-Duplex: CSMA/CD\nCarrier Sense Multiple Access with Collision Detection\n\nEscuchar el medio antes de transmitir\nSi está libre → transmitir\nSi hay colisión → detectar\nAplicar backoff exponencial\nReintentar transmisión\n\nSolo puede transmitir en una dirección a la vez. En Full-Duplex no necesitaríamos realizar controles.\n\nRedes Inalámbricas: CSMA/CA\n Carrier Sense Multiple Access with Collision Avoidance\n\nEsperar tiempo aleatorio antes de transmitir\nUsar acknowledgments para confirmar recepción\nProtocolo RTS/CTS para problema del nodo oculto\n\nLa detección de colisiones es impráctica en radio"
  },
  {
    "objectID": "ch1_p2_access_layer.html#direccionamiento-físico",
    "href": "ch1_p2_access_layer.html#direccionamiento-físico",
    "title": "Capa de Acceso a la Red",
    "section": "2. Direccionamiento Físico",
    "text": "2. Direccionamiento Físico\n\nOpera a nivel de hardware, independiente de protocolos superiores, usando direcciones MAC únicas\n\n\n\n\n\n\n\ngraph LR\n    subgraph \"Dirección MAC: 00:1A:2B:3C:4D:5E (48 bits)\"\n        OUI[\"00:1A:2B&lt;br/&gt;OUI&lt;br/&gt;(Organizationally Unique Identifier)&lt;br/&gt;Asignado por IEEE\"]\n        NIC[\"3C:4D:5E&lt;br/&gt;Identificador del Dispositivo&lt;br/&gt;Asignado por el fabricante\"]\n    end\n    \n    style OUI fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    style NIC fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n\n\n\n\n\n\n\n\n\nUnicast\n\nUn único destinatario\nDirección específica del dispositivo\n\n\nBroadcast\n\nTodos los dispositivos\nFF:FF:FF:FF:FF:FF\n\n\nMulticast\n\nGrupo específico\nPrimer bit = 1\n\n\n\n\n\n\n\n\nTip\n\n\nLas direcciones MAC son como el DNI del dispositivo: únicas, estáticas y cada dispositivo tiene una"
  },
  {
    "objectID": "ch1_p2_access_layer.html#detección-y-corrección-de-errores",
    "href": "ch1_p2_access_layer.html#detección-y-corrección-de-errores",
    "title": "Capa de Acceso a la Red",
    "section": "3. Detección y Corrección de Errores",
    "text": "3. Detección y Corrección de Errores\n\nGarantiza la integridad de los datos transmitidos a través del medio físico\n\nCódigos de Redundancia Cíclica (CRC)\n\n\nProceso CRC:\n\nGenerar polinomio matemático sobre datos\nAgregar Frame Check Sequence (FCS) al final\nReceptor recalcula el CRC\nComparar con el recibido\nDetectar errores de 1 bit y múltiples bits\n\nChecksums simples:\n\nSuma aritmética de bytes\nMenos robusto pero más rápido\n\n\nForward Error Correction (FEC):\n\nNo solo detecta, también corrige errores\nCódigos Hamming: errores de 1 bit\nReed-Solomon: errores en ráfagas\nEspecialmente importante en medios inalámbricos"
  },
  {
    "objectID": "ch1_p2_access_layer.html#detección-y-corrección-de-errores-ejemplo",
    "href": "ch1_p2_access_layer.html#detección-y-corrección-de-errores-ejemplo",
    "title": "Capa de Acceso a la Red",
    "section": "3. Detección y Corrección de Errores (Ejemplo)",
    "text": "3. Detección y Corrección de Errores (Ejemplo)\nIntroducir un mensaje de 4 bits (1011) y os saldrá a le derecha el mensaje codificado\n\n\n\n// Input: 4-bit message\nviewof msg4 = Inputs.text({label: \"Mensaje (4 bits)\", placeholder: \"e.g. 1011\"})\n\n\n\n\n\n\n\n\n\nfunction hamming74_encode(bits4) {\n  if (!/^[01]{4}$/.test(bits4)) return \"\";\n  const [d1, d2, d3, d4] = bits4.split(\"\").map(b =&gt; +b);\n  \n  // parity bits\n  const p1 = d1 ^ d2 ^ d4;\n  const p2 = d1 ^ d3 ^ d4;\n  const p3 = d2 ^ d3 ^ d4;\n  \n  // Codeword positions: p1 p2 d1 p3 d2 d3 d4\n  const code = [p1, p2, d1, p3, d2, d3, d4];\n  return code.join(\"\");\n}\n\nencoded = hamming74_encode(msg4)\nencoded\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAquí podréis meter el mensaje codificado y saber si ha habido cambios en un bit y corregirlos (Hamming).\n\n\n\n// Input: 7-bit codeword\nviewof code7 = Inputs.text({label: \"Codeword (7 bits)\", placeholder: \"e.g. 0110011\"})\n\n\n\n\n\n\n\n\n\nfunction hamming74_decode(code) {\n  if (!/^[01]{7}$/.test(code)) return \"Enter exactly 7 bits\";\n  const bits = code.split(\"\").map(b =&gt; +b);\n  const [p1, p2, d1, p3, d2, d3, d4] = bits;\n\n  // syndrome bits\n  const s1 = p1 ^ d1 ^ d2 ^ d4;\n  const s2 = p2 ^ d1 ^ d3 ^ d4;\n  const s3 = p3 ^ d2 ^ d3 ^ d4;\n  \n  const syndrome = (s3 &lt;&lt; 2) | (s2 &lt;&lt; 1) | s1; // binary → position (1-7)\n\n  let corrected = [...bits];\n  let msg = [d1, d2, d3, d4].join(\"\");\n  \n  if (syndrome === 0) {\n    return `✅ Valid codeword, message = ${msg}`;\n  } else {\n    // correct bit if single error\n    corrected[syndrome - 1] ^= 1; \n    const [cp1, cp2, cd1, cp3, cd2, cd3, cd4] = corrected;\n    const corrected_msg = [cd1, cd2, cd3, cd4].join(\"\");\n    return `❌ Error at position ${syndrome}. Corrected codeword = ${corrected.join(\"\")}, message = ${corrected_msg}`;\n  }\n}\n\nresult = hamming74_decode(code7)\nresult"
  },
  {
    "objectID": "ch1_p2_access_layer.html#control-de-tamaño",
    "href": "ch1_p2_access_layer.html#control-de-tamaño",
    "title": "Capa de Acceso a la Red",
    "section": "4. Control de Tamaño",
    "text": "4. Control de Tamaño\n\nManeja las limitaciones de tamaño impuestas por diferentes tecnologías de red\n\nMaximum Transmission Unit (MTU)\n\n\n\nTecnología\nMTU (bytes)\nCaracterísticas\n\n\n\n\nEthernet\n1500\nEstándar más común en LAN\n\n\nToken Ring\n4464\nTecnología legacy\n\n\nFDDI\n4352\nFiber Distributed Data Interface\n\n\nPPP\nVariable (~1500)\nPara compatibilidad con Ethernet\n\n\n\n\n\n\n\n\n\nAdvertencia\n\n\nSi datos &gt; MTU → La Capa de Acceso a la Red descarta automáticamente el paquete\n\n\n\n\nNota: El MTU determina el tamaño máximo de datos que puede transportar una sola trama"
  },
  {
    "objectID": "ch1_p2_access_layer.html#sincronización-y-temporización",
    "href": "ch1_p2_access_layer.html#sincronización-y-temporización",
    "title": "Capa de Acceso a la Red",
    "section": "5. Sincronización y Temporización",
    "text": "5. Sincronización y Temporización\n\nCoordina el timing entre dispositivos para asegurar la correcta interpretación de señales digitales\n\nNiveles de sincronización\n\n\nTipos de sincronización:\n\nSincronización de bit: Determina límites temporales de cada bit\nSincronización de trama: Identifica inicio y fin de cada trama\nSincronización de símbolo: Para modulaciones complejas (QAM)\n\n\n¿Por qué es crítica?\n\nEn redes de alta velocidad, pequeñas diferencias causan errores\nEstablece marcos de tiempo comunes\nPermite interpretación correcta de señales\nEsencial para comunicación digital confiable"
  },
  {
    "objectID": "ch1_p2_access_layer.html#gestión-de-topología",
    "href": "ch1_p2_access_layer.html#gestión-de-topología",
    "title": "Capa de Acceso a la Red",
    "section": "6. Gestión de Topología",
    "text": "6. Gestión de Topología\n\nDescubre y mantiene información sobre la estructura física de la red\n\nComponentes principales\n\n\nMantenimiento de enlaces:\n\nKeepalive messages\nDetección proactiva de fallos\nAntes de afectar tráfico de usuarios\n\nProtocolos de detección:\n\nCDP (Cisco Discovery Protocol)\nLLDP (Link Layer Discovery Protocol)\nDispositivos se identifican mutuamente\nComparten información de capacidades\n\n\nPrevención de bucles:\n\nSpanning Tree Protocol (STP)\nPreviene bucles en topologías redundantes\nEvita tormentas de broadcast\n\nAdaptación automática:\n\nDetecta cambios en la topología\nResponde a fallos de enlaces\nIncorpora nuevos dispositivos"
  },
  {
    "objectID": "ch1_p2_access_layer.html#control-de-calidad-de-servicio-qos",
    "href": "ch1_p2_access_layer.html#control-de-calidad-de-servicio-qos",
    "title": "Capa de Acceso a la Red",
    "section": "7. Control de Calidad de Servicio (QoS)",
    "text": "7. Control de Calidad de Servicio (QoS)\n\nPrioriza diferentes tipos de tráfico según su importancia y requisitos de rendimiento\n\nMecanismos de gestión\n\n\nGestión de buffers:\n\nWeighted Fair Queuing: Recursos proporcionales según importancia\nPriority Queuing: Tráfico crítico tiene precedencia\nRandom Early Detection: Descarta proactivamente antes de saturación\n\n\nAplicaciones beneficiadas:\n\n🎥 Video en tiempo real\n📞 VoIP (Voz sobre IP)\n🎮 Gaming online\n💼 Aplicaciones críticas de negocio\n\nFundamental para aplicaciones sensibles al tiempo\n\n\n\n\n\n\n\nTip\n\n\nQoS garantiza que aplicaciones críticas reciban el ancho de banda necesario incluso en momentos de congestión"
  },
  {
    "objectID": "ch1_p2_access_layer.html#switches-evolución-y-tipos",
    "href": "ch1_p2_access_layer.html#switches-evolución-y-tipos",
    "title": "Capa de Acceso a la Red",
    "section": "Switches: Evolución y Tipos",
    "text": "Switches: Evolución y Tipos\n\n\nSwitches No Gestionados\n\nPlug-and-play\nAprendizaje MAC automático\nRedes pequeñas/domésticas\nSin configuración\n\n\nSwitches Gestionados\n\nVLANs y segmentación\nQoS y priorización\nSNMP para monitorización\nSeguridad 802.1X"
  },
  {
    "objectID": "ch1_p2_access_layer.html#dominios-de-colisión-switch-vs-hub",
    "href": "ch1_p2_access_layer.html#dominios-de-colisión-switch-vs-hub",
    "title": "Capa de Acceso a la Red",
    "section": "Dominios de Colisión: Switch vs Hub",
    "text": "Dominios de Colisión: Switch vs Hub\n\n\n\n\n\ngraph TB\n    subgraph \"HUB - Medio Compartido\"\n        H1[Hub]\n        SHARED((Medio&lt;br/&gt;Compartido))\n        PC1[PC1] --- SHARED\n        PC2[PC2] --- SHARED\n        PC3[PC3] --- SHARED\n        PC4[PC4] --- SHARED\n        SHARED --- H1\n    end\n    \n    subgraph \"SWITCH - Dominios Separados\"\n        S1[Switch]\n        PC5[PC5] --- S1\n        PC6[PC6] --- S1\n        PC7[PC7] --- S1\n        PC8[PC8] --- S1\n    end\n    \n    classDef collision fill:#ffcdd2,stroke:#d32f2f\n    classDef nocollision fill:#c8e6c9,stroke:#388e3c\n    classDef shared fill:#fff3e0,stroke:#f57c00\n    \n    class H1,PC1,PC2,PC3,PC4 collision\n    class S1,PC5,PC6,PC7,PC8 nocollision\n    class SHARED shared\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nLos switches crean dominios de colisión separados para cada puerto, evitando colisiones entre dispositivos en diferentes puertos"
  },
  {
    "objectID": "ch1_p2_access_layer.html#otros-dispositivos-de-acceso",
    "href": "ch1_p2_access_layer.html#otros-dispositivos-de-acceso",
    "title": "Capa de Acceso a la Red",
    "section": "Otros Dispositivos de Acceso",
    "text": "Otros Dispositivos de Acceso\n\n\n\n\n\n\n\n\n\nDispositivo\nFunción\nCaracterísticas\nAplicación\n\n\n\n\nAccess Points\nWiFi ↔︎ Cableado\nCSMA/CA, Beamforming\nRedes inalámbricas\n\n\nRepetidores\nExtensión alcance\nRegeneración señal\nSuperar distancia\n\n\nMedia Converters\nCambio de medio\nFibra ↔︎ Cobre\nMigración gradual\n\n\nTransceivers\nModular\nSFP/SFP+/QSFP\nFlexibilidad\n\n\n\n\n\n\n\n\n\ngraph LR\n    PC[\"💻 PC\"]\n    AP[\"📡 Access Point\"]\n    SW[\"🔌 Switch\"]\n    MC1[\"🔄 Media Converter\"]\n    FO[\"🌟 Fibra Óptica\"]\n    MC2[\"🔄 Media Converter\"]\n    RT[\"🌐 Router\"]\n    \n    PC &lt;-.-&gt;|\"WiFi\"| AP\n    AP &lt;--&gt;|\"Ethernet\"| SW\n    SW &lt;--&gt;|\"Cobre\"| MC1\n    MC1 &lt;--&gt;|\"Fibra\"| FO\n    FO &lt;--&gt;|\"Fibra\"| MC2\n    MC2 &lt;--&gt;|\"Ethernet\"| RT"
  },
  {
    "objectID": "ch1_p2_access_layer.html#ethernet-ieee-802.3",
    "href": "ch1_p2_access_layer.html#ethernet-ieee-802.3",
    "title": "Capa de Acceso a la Red",
    "section": "Ethernet (IEEE 802.3)",
    "text": "Ethernet (IEEE 802.3)\nEstructura de Trama Ethernet\n\n\n\n\n\n\npacket-beta\n    0-31: \"Preámbulo\"\n    32-47: \"Preámbulo\"\n    48-55: \"Preámbulo\"\n    56-63: \"SFD\"\n    64-111: \"MAC Destino (6 bytes)\"\n    112-159: \"MAC Origen (6 bytes)\"\n    160-175: \"Tipo/Longitud\"\n    176-191: \"Datos\"\n    192-207: \"Datos\"\n    208-223: \"Datos (Payload)\"\n    224-239: \"...\"\n    240-255: \"Datos\"\n    256-287: \"FCS (4 bytes)\"\n\n\n\n\n\n\n\n\n\nCampos principales:\n\nPreámbulo: Sincronización\nMACs: Identificación única\nTipo: Protocolo superior (IPv4: 0x0800)\nPayload: Datos + padding si &lt; 46 bytes\n\n\nEvolución de velocidades:\n\n10Base-T: 10 Mbps\nFast Ethernet: 100 Mbps\nGigabit: 1 Gbps\n10G/40G/100G Ethernet"
  },
  {
    "objectID": "ch1_p2_access_layer.html#wifi-ieee-802.11",
    "href": "ch1_p2_access_layer.html#wifi-ieee-802.11",
    "title": "Capa de Acceso a la Red",
    "section": "WiFi (IEEE 802.11)",
    "text": "WiFi (IEEE 802.11)\nTrama WiFi: Mayor complejidad\n\n\n\n\n\n\npacket-beta\n    0-15: \"Frame Control\"\n    16-31: \"Duration/ID\"\n    32-79: \"Address 1 (Receptor)\"\n    80-127: \"Address 2 (Transmisor)\"\n    128-175: \"Address 3 (BSSID/AP)\"\n    176-191: \"Sequence Control\"\n    192-239: \"Address 4 (opcional)\"\n    240-255: \"QoS Control (opcional)\"\n    256-287: \"Datos ...\"\n    288-303: \"Datos ...\"\n    304-319: \"FCS (4 bytes)\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nLa trama es considerablemente más compleja debido a que estamos en un medio compartido y puede haber repetidores, así como comunicaciones directas."
  },
  {
    "objectID": "ch1_p2_access_layer.html#evolución-de-estándares-wifi",
    "href": "ch1_p2_access_layer.html#evolución-de-estándares-wifi",
    "title": "Capa de Acceso a la Red",
    "section": "Evolución de Estándares WiFi",
    "text": "Evolución de Estándares WiFi\n\n\n\nGeneración\nEstándar\nVelocidad Max\nBandas\nAño\n\n\n\n\nWiFi 4\n802.11n\n600 Mbps\n2.4/5 GHz\n2009\n\n\nWiFi 5\n802.11ac\n3.5 Gbps\n5 GHz\n2014\n\n\nWiFi 6\n802.11ax\n9.6 Gbps\n2.4/5 GHz\n2019\n\n\nWiFi 6E\n802.11ax\n9.6 Gbps\n+ 6 GHz\n2020\n\n\nWiFi 7\n802.11be\n46 Gbps\n2.4/5/6 GHz\n2024\n\n\n\n\n\nMejoras clave:\n\nMIMO (múltiples antenas)\nOFDMA (mejor uso espectro)\nBeamforming direccional (dirigir hacia un punto en concreto)\n\n\nTrade-offs de bandas:\n\n2.4 GHz: Mayor alcance, menor velocidad\n5 GHz: Mayor velocidad, menor alcance\n6 GHz: Máxima velocidad, mínimo alcance"
  },
  {
    "objectID": "ch1_p2_access_layer.html#ppp-y-frame-relay",
    "href": "ch1_p2_access_layer.html#ppp-y-frame-relay",
    "title": "Capa de Acceso a la Red",
    "section": "PPP y Frame Relay",
    "text": "PPP y Frame Relay\n\n\nPoint-to-Point Protocol (PPP)\nCaracterísticas:\n\nEnlaces punto a punto\nDetección de errores\nAutenticación (PAP/CHAP)\nConfiguración IP automática\n\nUso actual:\n\nEnlaces de respaldo\nConexiones satelitales\nAlgunas VPNs\n\n\nFrame Relay\nCaracterísticas:\n\nWAN con circuitos virtuales\nConmutación de tramas\nControl de congestión\n\n\nEstado:\n\nReemplazado por MPLS\nLegacy en empresas antiguas\nConceptos aún relevantes"
  },
  {
    "objectID": "ch1_p2_access_layer.html#arp-address-resolution-protocol",
    "href": "ch1_p2_access_layer.html#arp-address-resolution-protocol",
    "title": "Capa de Acceso a la Red",
    "section": "ARP: Address Resolution Protocol",
    "text": "ARP: Address Resolution Protocol\nTraducción IP → MAC\n\n\n\n\n\n\nsequenceDiagram\n    participant A as Host A&lt;br/&gt;IP: 192.168.1.10&lt;br/&gt;MAC: AA:BB:CC:DD:EE:FF\n    participant N as Red Local&lt;br/&gt;(Broadcast)\n    participant B as Host B&lt;br/&gt;IP: 192.168.1.20&lt;br/&gt;MAC: 11:22:33:44:55:66\n    \n    Note over A: Necesito MAC de 192.168.1.20\n    \n    A-&gt;&gt;N: ARP Request (Broadcast)&lt;br/&gt;¿Quién tiene 192.168.1.20?\n    N-&gt;&gt;B: ARP Request\n    \n    Note over B: ¡Esa es mi IP!\n    \n    B-&gt;&gt;A: ARP Reply (Unicast)&lt;br/&gt;192.168.1.20 = 11:22:33:44:55:66\n    \n    Note over A: Guardo en caché ARP\n\n\n\n\n\n\n\n\n\nProceso ARP:\n\nBroadcast preguntando por IP\nDispositivo con esa IP responde\nSe guarda en caché local\nTemporizador elimina entradas viejas\n\n\nTipos de ARP:\n\nDinámico: Aprendizaje automático\nEstático: Entradas manuales permanentes\nProxy ARP: Router responde por otros\nGratuitous: Anuncio proactivo"
  },
  {
    "objectID": "ch1_p2_access_layer.html#límites-físicos-y-distancias",
    "href": "ch1_p2_access_layer.html#límites-físicos-y-distancias",
    "title": "Capa de Acceso a la Red",
    "section": "Límites Físicos y Distancias",
    "text": "Límites Físicos y Distancias\nCable de Cobre (UTP/STP)\n\n\nCausas de la limitación:\n\nAtenuación de señal\nInterferencia electromagnética\nCrosstalk entre pares\nDegradación con distancia\n\n\nSoluciones:\n\nSwitches cada 100m\nRepetidores/Extensores\nFibra óptica (kilómetros)\nEnlaces inalámbricos\n\n\nComparación de Medios\n\n\n\nMedio\nDistancia Max\nVelocidad\nInterferencia\n\n\n\n\nUTP Cat5e\n100m\n1 Gbps\nAlta\n\n\nUTP Cat6a\n100m\n10 Gbps\nMedia\n\n\nFibra MM\n2 km\n10 Gbps\nNula\n\n\nFibra SM\n100+ km\n100 Gbps\nNula"
  },
  {
    "objectID": "ch1_p2_access_layer.html#ejemplo-práctico-verificación-de-configuración",
    "href": "ch1_p2_access_layer.html#ejemplo-práctico-verificación-de-configuración",
    "title": "Capa de Acceso a la Red",
    "section": "Ejemplo Práctico: Verificación de Configuración",
    "text": "Ejemplo Práctico: Verificación de Configuración\nComandos útiles para verificar la capa de acceso\n\n\nVer información de red:\n# Linux/Mac - Ver dirección MAC\nifconfig\n\n# Windows - Ver dirección MAC\nipconfig /all\n\n# Ver tabla ARP\narp -a\n\nEjemplo de salida ARP:\n192.168.1.1   00:1a:2b:3c:4d:5e\n192.168.1.10  00:2b:3c:4d:5e:6f\n192.168.1.20  00:3c:4d:5e:6f:70\nMuestra las asociaciones IP-MAC en la caché local"
  },
  {
    "objectID": "ch1_p2_access_layer.html#puntos-clave",
    "href": "ch1_p2_access_layer.html#puntos-clave",
    "title": "Capa de Acceso a la Red",
    "section": "Puntos Clave",
    "text": "Puntos Clave\n\nLa Capa de Acceso a la Red maneja la transmisión física y el control de acceso al medio compartido\nCombina las funciones de las capas física y de enlace del modelo OSI\nControl de acceso al medio: CSMA/CD (Ethernet) vs CSMA/CA (WiFi)\nDirecciones MAC: 48 bits, únicas por dispositivo (OUI + ID dispositivo)\nSwitches evolucionaron desde hubs, creando dominios de colisión independientes\nDetección de errores mediante CRC y técnicas FEC\nMTU define el tamaño máximo de trama (Ethernet: 1500 bytes)\nARP resuelve la traducción entre direcciones IP y MAC"
  },
  {
    "objectID": "ch1_p4_transport.html#qué-es-la-capa-de-transporte",
    "href": "ch1_p4_transport.html#qué-es-la-capa-de-transporte",
    "title": "Capa de Transporte",
    "section": "¿Qué es la Capa de Transporte?",
    "text": "¿Qué es la Capa de Transporte?\n\nLa capa de transporte proporciona comunicación lógica entre procesos de aplicación que se ejecutan en diferentes hosts\n\n\n\nFunción principal:\n\nSe ejecuta en hosts finales\nNo en el núcleo de la red\nDivide mensajes en segmentos\nRecompone segmentos en el receptor\n\nProtocolos principales:\n\nUDP: Protocolo minimalista\nTCP: Protocolo complejo con garantías\n\n\n\n\n\n\n\n\nblock-beta\n    columns 1\n    \n    A[\"&lt;b&gt;Capa de Aplicación&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;HTTP, HTTPS, FTP, SMTP&lt;br/&gt;DNS, DHCP, Telnet, SSH\"]\n    \n    B[\"&lt;b&gt;Capa de Transporte&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;TCP, UDP&lt;br/&gt;Control de flujo y errores\"]\n    \n    C[\"&lt;b&gt;Capa de Internet&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;IP, ICMP, ARP&lt;br/&gt;Enrutamiento, Direccionamiento\"]\n    \n    D[\"&lt;b&gt;Capa de Acceso a la Red&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Ethernet, WiFi, PPP&lt;br/&gt;Frames, MAC Address&lt;br/&gt;Control de acceso al medio\"]\n    \n    classDef highlight fill:#ff9999,stroke:#cc0000,stroke-width:4px,color:#000\n    classDef normal fill:#e1f5fe,stroke:#0277bd,stroke-width:2px,color:#000\n    \n    class B highlight\n    class A,C,D normal"
  },
  {
    "objectID": "ch1_p4_transport.html#ejemplo-cliente-servidor-con-udp",
    "href": "ch1_p4_transport.html#ejemplo-cliente-servidor-con-udp",
    "title": "Capa de Transporte",
    "section": "Ejemplo: Cliente-Servidor con UDP",
    "text": "Ejemplo: Cliente-Servidor con UDP\n\n\n\n\n\n\nsequenceDiagram\n    participant A as Client A\n    participant I as The Internet\n    participant B as Server B\n        \n    A-&gt;&gt;I: Paquete UDP 1 (IP destino: 8.8.8.8, puerto: 80)\n    I-&gt;&gt;B: Paquete 1 entregado\n    \n    A-&gt;&gt;I: Paquete UDP 2 (IP destino: 8.8.8.8, puerto:80)\n    I-&gt;&gt;B: Paquete 2 entregado\n    \n    A-&gt;&gt;I: Paquete UDP 3 (IP destino: 8.8.8.8, puerto:80)\n    \n    A-&gt;&gt;I: Paquete UDP 4 (IP destino: 8.8.8.8, puerto:80)\n    I-&gt;&gt;B: Paquete 4 entregado (llega primero!)\n    A-&gt;&gt;I: Paquete UDP 5 (IP destino: 8.8.8.8, puerto:80)\n    I-&gt;&gt;B: Paquete 3 entregado (llega tarde!)\n\n\n\n\n\n\n\n\nPaquete 5: perdido (~1% pérdida normal)\nPaquete 4 llega antes que el 3\nUDP no corrige orden ni pérdidas"
  },
  {
    "objectID": "ch1_p4_transport.html#multiplexación-y-demultiplexación",
    "href": "ch1_p4_transport.html#multiplexación-y-demultiplexación",
    "title": "Capa de Transporte",
    "section": "1. Multiplexación y Demultiplexación",
    "text": "1. Multiplexación y Demultiplexación\nMultiplexación: Recoger información de diferentes sockets y enviarla por un único medio.\nDemultiplexación: Recibir segmentos y enviarlos a los sockets correspondientes.\n\n\nIdentificación de sockets:\n\nTCP: (IP y Puerto origen, IP y puerto destino)\nUDP: (IP y puerto origen, IP y puerto destino)\n\n\nPuertos: Identificadores numéricos (1-65535)\n\nServidores: asignación manual y fija\nClientes: asignación aleatoria\n\n\n\n\n\n\n\ngraph LR\n    subgraph \"MULTIPLEXACIÓN\"\n        A1[Socket 1&lt;br/&gt;App A] --&gt; M[Multiplexor&lt;br/&gt;Capa de Transporte]\n        A2[Socket 2&lt;br/&gt;App B] --&gt; M\n        A3[Socket 3&lt;br/&gt;App C] --&gt; M\n        M --&gt; N[Red&lt;br/&gt;Medio único]\n    end\n    \n    subgraph \"DEMULTIPLEXACIÓN\"\n        N2[Red&lt;br/&gt;Segmentos entrantes] --&gt; D[Demultiplexor&lt;br/&gt;Capa de Transporte]\n        D --&gt; B1[Socket 1&lt;br/&gt;App A]\n        D --&gt; B2[Socket 2&lt;br/&gt;App B]\n        D --&gt; B3[Socket 3&lt;br/&gt;App C]\n    end\n    \n    N -.-&gt;|Transmisión| N2\n    \n    classDef appClass fill:#e1f5fe,stroke:#0277bd,stroke-width:2px\n    classDef muxClass fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    classDef netClass fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    \n    class A1,A2,A3,B1,B2,B3 appClass\n    class M,D muxClass\n    class N,N2 netClass"
  },
  {
    "objectID": "ch1_p4_transport.html#transferencia-fiable",
    "href": "ch1_p4_transport.html#transferencia-fiable",
    "title": "Capa de Transporte",
    "section": "2. Transferencia Fiable",
    "text": "2. Transferencia Fiable\n\n\nCaracterísticas de una transferencia fiable:\n\nNo se corrompe ningún bit\nNo se pierde información (paquetes)\nLa información se entrega en orden correcto\n\n\nOpciones de implementación:\n\nUsar protocolos fiables existentes (TCP)\nImplementar características propias sobre protocolo no fiable (UDP + lógica aplicación)\n\n\n\n\n\n\n\ngraph LR\n    \n    E[EMISOR] --&gt; PC1[PROTOCOLO&lt;br/&gt;CONFIABILIDAD]\n    PC1 --&gt; MNF[MEDIO&lt;br/&gt;NO FIABLE&lt;br/&gt;&lt;br/&gt;• Puede corromper bits&lt;br/&gt;• Puede perder paquetes&lt;br/&gt;• Puede desordenar]\n    MNF --&gt; PC2[PROTOCOLO&lt;br/&gt;CONFIABILIDAD]\n    PC2 --&gt; R[RECEPTOR]\n    \n    PC1 -.-&gt;|Implementa| MECH[• Detección de errores&lt;br/&gt;• Retransmisión&lt;br/&gt;• Control de flujo&lt;br/&gt;• Secuenciación&lt;br/&gt;• ACK/NACK&lt;br/&gt;• Timeouts]\n    PC2 -.-&gt;|Implementa| MECH\n    \n    classDef endpointClass fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    classDef protocolClass fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px\n    classDef unreliableClass fill:#ffebee,stroke:#d32f2f,stroke-width:2px\n    classDef reliableClass fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    classDef mechClass fill:#fafafa,stroke:#616161,stroke-width:1px\n    \n    class E,R endpointClass\n    class PC1,PC2 protocolClass\n    class MNF unreliableClass\n    class MECH mechClass"
  },
  {
    "objectID": "ch1_p4_transport.html#otros-conceptos",
    "href": "ch1_p4_transport.html#otros-conceptos",
    "title": "Capa de Transporte",
    "section": "Otros conceptos",
    "text": "Otros conceptos\n\nControl de flujo: Evita que el emisor sature al receptor limitando la velocidad de envío según la capacidad del destinatario\nControl de congestión: Ajusta la velocidad de transmisión para evitar saturar la red cuando detecta congestión\nTemporización: Proporciona el tiempo mínimo de entrega de datos entre emisor y receptor a través de la red\nTasa de transferencia mínima: Garantiza una velocidad mínima de transmisión de datos para aplicaciones que requieren ancho de banda constante"
  },
  {
    "objectID": "ch1_p4_transport.html#características-de-udp",
    "href": "ch1_p4_transport.html#características-de-udp",
    "title": "Capa de Transporte",
    "section": "Características de UDP",
    "text": "Características de UDP\n\n\nProtocolo minimalista [RFC 768]:\n\nBasado en best-effort (Fire-and-forget)\nNo orientado a conexión\nEntrega no fiable y sin orden\nIntegridad básica (checksum)\nMultiplexación y demultiplexación\n\n\nLo que NO proporciona:\n\nControl de flujo\nControl de congestión\nTemporización\nTasa de transferencia mínima\nSeguridad\n\n\n\n\n\n\n\n\nsequenceDiagram\n    participant A as Client A\n    participant I as The Internet\n    participant B as Server B\n        \n    A-&gt;&gt;I: Paquete UDP 3 (IP destino: 8.8.8.8, puerto:80)\n    Note over I: Paquete UDP 3 se pierde\n    A-&gt;&gt;I: Paquete UDP 4 (IP destino: 8.8.8.8, puerto:80)\n    I-&gt;&gt;B: Paquete 4 entregado (llega primero!)\n    Note over B: No garantiza orden\n    A-&gt;&gt;I: Paquete UDP 5 (IP destino: 8.8.8.8, puerto:80)\n    I-&gt;&gt;B: Paquete 3 entregado (llega tarde!)"
  },
  {
    "objectID": "ch1_p4_transport.html#estructura-del-paquete-udp",
    "href": "ch1_p4_transport.html#estructura-del-paquete-udp",
    "title": "Capa de Transporte",
    "section": "Estructura del Paquete UDP",
    "text": "Estructura del Paquete UDP\n\n\n\n\n\npacket-beta\n\n    0-15: \"Source Port\"\n    16-31: \"Destination Port\"\n    32-47: \"Length\"\n    48-63: \"Checksum\"\n\n\n\n\n\n\n\nLongitud: Hasta 65535 bytes (limitado por MTU)\nChecksum: Verificación de integridad\nEstructura simple comparada con otros protocolos\n8 bytes de cabecera fijos."
  },
  {
    "objectID": "ch1_p4_transport.html#checksum-udp",
    "href": "ch1_p4_transport.html#checksum-udp",
    "title": "Capa de Transporte",
    "section": "Checksum UDP",
    "text": "Checksum UDP\nProceso de cálculo:\n\nPreparación: pseudo-cabecera IP + cabecera UDP + datos\nDivisión en palabras de 16 bits\nSuma usando aritmética de complemento a uno\nComplemento del resultado → campo checksum\n\nVerificación en receptor:\n\nMismo algoritmo incluyendo checksum recibido\nResultado esperado: 0xFFFF\nSi difiere: datagrama descartado silenciosamente"
  },
  {
    "objectID": "ch1_p4_transport.html#casos-de-uso-de-udp",
    "href": "ch1_p4_transport.html#casos-de-uso-de-udp",
    "title": "Capa de Transporte",
    "section": "Casos de Uso de UDP",
    "text": "Casos de Uso de UDP\nAplicaciones ideales para UDP:\n\nMultimedia streaming: Tolerante a pérdidas, sensible a interrupciones\nDNS: Respuestas rápidas necesarias\nSNMP: Administración de red\nGaming online: Latencia baja crítica\nQUIC/HTTP3: Base para protocolos modernos optimizados\n\nEjemplo: Implementar protocolo propio sobre UDP para juegos\n\nAñadir número de paquete\nDescartar paquetes fuera de orden\nIgnorar duplicados\nSobrecarga mínima"
  },
  {
    "objectID": "ch1_p4_transport.html#características-de-tcp",
    "href": "ch1_p4_transport.html#características-de-tcp",
    "title": "Capa de Transporte",
    "section": "Características de TCP",
    "text": "Características de TCP\n\n\nProtocolo confiable [RFC 793]:\n\nOrientado a conexión\nEntrega fiable y ordenada (confiabilidad)\nControl de flujo\nControl de congestión\nMultiplexación y demultiplexación\n\n\nLo que NO proporciona:\n\nTemporización específica\nTasa mínima garantizada\nSeguridad nativa (necesita TLS/SSL)\n\n\nTrade-off: Confiabilidad y orden sobre velocidad pura"
  },
  {
    "objectID": "ch1_p4_transport.html#estructura-del-paquete-tcp",
    "href": "ch1_p4_transport.html#estructura-del-paquete-tcp",
    "title": "Capa de Transporte",
    "section": "Estructura del Paquete TCP",
    "text": "Estructura del Paquete TCP\n\n\n\n\n\n\npacket-beta\n  0-15: \"Source Port\"\n  16-31: \"Destination Port\"\n  32-63: \"Sequence Number\"\n  64-95: \"Acknowledgment Number\"\n  96-99: \"Data Offset\"\n  100-105: \"Reserved\"\n  106: \"URG\"\n  107: \"ACK\"\n  108: \"PSH\"\n  109: \"RST\"\n  110: \"SYN\"\n  111: \"FIN\"\n  112-127: \"Window\"\n  128-143: \"Checksum\"\n  144-159: \"Urgent Pointer\"\n  160-191: \"Options (variable)\"\n\n\n\n\n\n\n\n\nSequence number: Número que identifica la posición del primer byte de datos en el segmento dentro del flujo de datos.\nAck number: Indica el próximo número de secuencia que el receptor espera recibir. Confirma la recepción correcta de datos anteriores.\nWindow: Implementa control de flujo (bytes que receptor acepta)\nchecksum: Muy similar a UDP.\nTamaño variable de 20 a 60 bytes."
  },
  {
    "objectID": "ch1_p4_transport.html#mecanismos-de-confiabilidad",
    "href": "ch1_p4_transport.html#mecanismos-de-confiabilidad",
    "title": "Capa de Transporte",
    "section": "Mecanismos de Confiabilidad",
    "text": "Mecanismos de Confiabilidad\n\nLos mecanismos de confiabilidad en TCP garantizan que los datos lleguen correctamente y en orden.\n\n\n\nNúmeros de secuencia y ACKs:\n\nCada byte tiene número único\nCuando enviamos información, está identificada por un número de secuencia (SEQ)\nAdemás, esperamos confirmación de que se ha recibido correctamente (ACK)\nACKs acumulativos (ACK para byte N confirma hasta N-1)\nLos ACKs y SEQs permite detectar datos perdidos, duplicados o desordenados\n\n\n\n\n\n\n\n\nsequenceDiagram\n    participant E as Emisor\n    participant R as Receptor\n    \n    Note over E,R: Conexión ya establecida, seq inicial=100\n    \n    E-&gt;&gt;R: seq=100, data=\"Hola\" (4 bytes)\n    Note over R: Recibe\n    R-&gt;&gt;E: ACK=104 (\"Espero byte 104\")\n    Note over R: Confirma\n    \n    E-&gt;&gt;R: seq=104, data=\" mundo!\" (7 bytes)  \n    R-&gt;&gt;E: ACK=111 (\"Espero byte 111\")\n    \n    E-&gt;&gt;R: seq=111, data=\" TCP\" (4 bytes)\n    E-&gt;&gt;R: seq=115, data=\" rocks\" (6 bytes)\n    Note over R: Recibe ambos correctamente\n    Note over R: ACK acumulativo confirma todo\n    R-&gt;&gt;E: ACK=121 (\"Recibí todo hasta byte 120\")"
  },
  {
    "objectID": "ch1_p4_transport.html#detección-de-pérdidas",
    "href": "ch1_p4_transport.html#detección-de-pérdidas",
    "title": "Capa de Transporte",
    "section": "Detección de pérdidas",
    "text": "Detección de pérdidas\n\n\nPérdidas por timeout\n\n\n\n\n\n\nsequenceDiagram\n    participant E as Emisor\n    participant R as Receptor\n    E -&gt;&gt; X: seq=100, data=\"A\", Paquete perdido\n    Note over E: Timeout de seq:100, reenvio\n    E -&gt;&gt; R: seq=100, data=\"A\",\n\n\n\n\n\n\n\n\nSi no recibe ACK en tiempo determinado → asume pérdida y retransmite\n\n\nPérdidas por ACKs duplicados\n\n\n\n\n\n\nsequenceDiagram\n    participant E as Emisor\n    participant R as Receptor\n    E -&gt;&gt; X: seq=100, data=\"A\", Paquete perdido\n    E -&gt;&gt; R: seq=101, data=\"B\"\n    E -&gt;&gt; R: seq=102, data=\"C\"\n    E -&gt;&gt; R: seq=103, data=\"D\"\n    R -&gt;&gt; E: ACK=100\n    R -&gt;&gt; E: ACK=100\n    R -&gt;&gt; E: ACK=100\n    Note over E,R: Retransmisión rápida\n    E -&gt;&gt; R: seq=100, data=\"A\"\n\n\n\n\n\n\n\n\n3 ACKs duplicados → Fast Retransmit inmediato"
  },
  {
    "objectID": "ch1_p4_transport.html#control-de-flujo",
    "href": "ch1_p4_transport.html#control-de-flujo",
    "title": "Capa de Transporte",
    "section": "Control de Flujo",
    "text": "Control de Flujo\n\nEl control de flujo en TCP es un mecanismo que evita que el emisor envíe más datos de los que el receptor puede procesar.\n\n\n\n\n\n\n\n\n\nsequenceDiagram\n    participant E as Emisor\n    participant R as Receptor\n    \n    Note over R: Buffer: 4KB libres\n    R-&gt;&gt;E: ACK=1000, Window=4096\n    E-&gt;&gt;R: seq=1000, data=2KB\n    Note over R: Buffer: 2KB libres\n    R-&gt;&gt;E: ACK=3000, Window=2048\n    E-&gt;&gt;R: seq=3000, data=2KB\n    Note over R: Buffer: 0KB libres (lleno)\n    R-&gt;&gt;E: ACK=5000, Window=0\n    Note over E: Detiene envío, inicia probe timer\n\n\n\n\n\n\n\n\n\nReceptor informa de su capacidad disponible, y se define:\nVentanaRecepcion = BufferRecepcion - (UltimoByteRecibido - UltimoByteLeido)\nEl emisor se limita a esta ventana\nSi la capacidad es 0, se espera un tiempo y se vuelve a probar."
  },
  {
    "objectID": "ch1_p4_transport.html#control-de-congestión",
    "href": "ch1_p4_transport.html#control-de-congestión",
    "title": "Capa de Transporte",
    "section": "Control de Congestión",
    "text": "Control de Congestión\n\nEl control de congestión en TCP es un mecanismo que ajusta automáticamente la velocidad de envío (ventana de congestión) para evitar saturar la red cuando detecta pérdida de paquetes o retardos.\n\n\n\nVentana de congestión\n\nVariable del emisor\nBytes máximos en “el aire” (enviados sin ACK)\nTasa efectiva = min(VentanaCongestion, VentanaRecepcion)\n\n\nEventos de Congestión (Pérdidas)\n\nTimeout -&gt; Modo slow start\n\nPérdida severa\nVentana → 1 MSS\n\n3 ACKs duplicados -&gt; Modo congestion avoidance\n\nPérdida moderada\nVentana → mitad"
  },
  {
    "objectID": "ch1_p4_transport.html#mecanismos-de-control-de-congestión",
    "href": "ch1_p4_transport.html#mecanismos-de-control-de-congestión",
    "title": "Capa de Transporte",
    "section": "Mecanismos de control de congestión",
    "text": "Mecanismos de control de congestión\n\n\nSlow start\n\n\n\n\n\n\nsequenceDiagram\n    participant E as Emisor\n    participant R as Receptor\n    \n    Note over E: Slow Start: cwnd=1 MSS\n    E-&gt;&gt;R: seq=1000, MSS=1KB\n    R-&gt;&gt;E: ACK=2000\n    Note over E: cwnd=2 MSS\n    E-&gt;&gt;R: seq=2000, MSS=1KB\n    E-&gt;&gt;R: seq=3000, MSS=1KB\n    R-&gt;&gt;E: ACK=4000\n    Note over E: cwnd=4 MSS (crecimiento exponencial)\n    Note over E: ... continúa hasta threshold o detectar pérdida ...\n\n\n\n\n\n\n\nDuplicar ventana por cada RTT\n\nCongestion Avoidance\n\n\n\n\n\n\nsequenceDiagram\n    participant E as Emisor\n    participant R as Receptor\n    \n    Note over E: Congestion Avoidance: cwnd=1 MSS\n\n    E-&gt;&gt;R: seq=1000, MSS=1KB\n    R-&gt;&gt;E: ACK=2000\n\n    Note over E: cwnd=2 MSS\n\n    E-&gt;&gt;R: seq=2000, MSS=1KB\n    E-&gt;&gt;R: seq=3000, MSS=1KB\n    R-&gt;&gt;E: ACK=4000\n\n    Note over E: cwnd=3 MSS (crecimiento lineal)\n    Note over E: ... continúa hasta detectar pérdida ...\n\n\n\n\n\n\n\nIncrementar en 1 la ventana en cada RTT"
  },
  {
    "objectID": "ch1_p4_transport.html#handshake-de-tres-fases",
    "href": "ch1_p4_transport.html#handshake-de-tres-fases",
    "title": "Capa de Transporte",
    "section": "Handshake de Tres Fases",
    "text": "Handshake de Tres Fases\n\n\n\n\n\n\n\n\nsequenceDiagram\n    participant CS as Cliente Socket\n    participant SS as Server Socket (listen)\n    participant NS as Nuevo Socket\n    \n    Note over CS: Estado: CLOSED\n    Note over SS: Estado: LISTEN\n    CS-&gt;&gt;SS: SYN=1, seq=x\n    Note over CS: Estado: SYN_SENT\n    Note over SS: accept() crea nuevo socket\n    SS-&gt;&gt;NS: Deriva conexión\n    Note over NS: Estado: SYN_RCVD\n    NS-&gt;&gt;CS: SYN=1, ACK=1, seq=y, ack=x+1\n    Note over CS: Estado: ESTABLISHED\n    CS-&gt;&gt;NS: ACK=1, seq=x+1, ack=y+1\n\n\n\n\n\n\n\n\n\nSe negocian: MSS, opciones de ventana, extensiones TCP\nLos flags de las cabeceras también consumen bits.\nEl serverSocket está en el servidor,\nuna vez se establece la comunicación ambos sockets son iguales."
  },
  {
    "objectID": "ch1_p4_transport.html#terminación-de-conexión",
    "href": "ch1_p4_transport.html#terminación-de-conexión",
    "title": "Capa de Transporte",
    "section": "Terminación de Conexión",
    "text": "Terminación de Conexión\n\n\n\n\n\n\n\n\nsequenceDiagram\n    participant C as Cliente\n    participant S as Servidor\n    \n    Note over C,S: Conexión establecida\n    C-&gt;&gt;S: FIN=1, seq=x\n    Note over C: Estado: FIN_WAIT_1\n    S-&gt;&gt;C: ACK=1, ack=x+1\n    Note over C: Estado: FIN_WAIT_2\n    S-&gt;&gt;C: FIN=1, ACK=1, seq=y\n    Note over S: Estado: LAST_ACK\n    C-&gt;&gt;S: ACK=1, ack=y+1\n    Note over C: Estado: TIME_WAIT\n    Note over C: Espera 2*MSL\n    Note over C,S: CLOSED\n\n\n\n\n\n\n\n\n\nCada extremo debe enviar su propio FIN y recibir confirmación,\npermitiendo cierre unidireccional (half-close).\nEl cliente espera 2*MSL para asegurar que su último ACK llegó,\nmanejando retransmisiones tardías antes del cierre definitivo."
  },
  {
    "objectID": "ch1_p4_transport.html#equidad-y-coexistencia",
    "href": "ch1_p4_transport.html#equidad-y-coexistencia",
    "title": "Capa de Transporte",
    "section": "Equidad y Coexistencia",
    "text": "Equidad y Coexistencia\nTCP es “fair”:\n\nN conexiones TCP comparten enlace equitativamente\nCada una obtiene ~R/N del ancho de banda R\nVer ejemplos en jergames (Bandwidth distribution)\n\nLimitaciones:\n\nUDP no implementa control → puede monopolizar\nAplicaciones con múltiples conexiones TCP\nConexiones con menor RTT tienen ventaja"
  },
  {
    "objectID": "ch1_p4_transport.html#cuándo-usar",
    "href": "ch1_p4_transport.html#cuándo-usar",
    "title": "Capa de Transporte",
    "section": "Cuándo usar…",
    "text": "Cuándo usar…\n\n\nUDP\nRequisitos para UDP:\n\nLatencias &lt; 50ms\nActualizaciones frecuentes\nInformación nueva más valiosa que la vieja\n\nVentajas:\n\nCabeceras pequeñas\nSin tráfico de control\nServidor necesita menos recursos\nNo mantiene estado\n\nEjemplos: Shooters (Counter Strike), juegos de lucha\n\nTCP\nRequisitos para TCP:\n\nTolerancia 100-200ms latencia\nEntrega ordenada garantizada\nDetección y corrección de errores\n\n Consideraciones:\n\nBloqueo cabeza de línea\nLatencias variables por retransmisiones\nMayor tráfico de red\n\n Ejemplos: MMORPGs (World of Warcraft), juegos por turnos"
  },
  {
    "objectID": "ch1_p4_transport.html#ejemplos-concretos",
    "href": "ch1_p4_transport.html#ejemplos-concretos",
    "title": "Capa de Transporte",
    "section": "Ejemplos Concretos",
    "text": "Ejemplos Concretos\n\n\nWorld of Warcraft (TCP):\n\nHechizos necesitan entrega garantizada\nActualizaciones de inventario críticas\nEstado de misiones consistente\nMMORPGs toleran 100-200ms\n\n\nCounter Strike (UDP):\n\nRetroalimentación inmediata crítica\nActualizaciones posición/disparos\nTécnicas de interpolación en cliente\nMitiga efecto paquetes perdidos"
  },
  {
    "objectID": "ch1_p4_transport.html#puntos-clave",
    "href": "ch1_p4_transport.html#puntos-clave",
    "title": "Capa de Transporte",
    "section": "Puntos Clave",
    "text": "Puntos Clave\n\nLa capa de transporte proporciona comunicación lógica entre procesos\nUDP: Minimalista, best-effort, no orientado a conexión\nTCP: Confiable, ordenado, orientado a conexión\nMultiplexación: Múltiples sockets por un medio\nControl de flujo: Evita saturar al receptor\nControl de congestión: Responde a condiciones de red\nTrade-off fundamental: Confiabilidad vs velocidad\nElección protocolo depende de requisitos aplicación"
  },
  {
    "objectID": "ch2_p2_js_classes.html#prototipos-vs-clases",
    "href": "ch2_p2_js_classes.html#prototipos-vs-clases",
    "title": "Desarrollo en el cliente",
    "section": "Prototipos vs Clases",
    "text": "Prototipos vs Clases\nJavaScript tradicionalmente usa prototipos, no clases como Java.\n\nCualquier objeto puede ser prototipo de otros\nCadena de herencia flexible\nES2015+ añadió sintaxis de clases (azúcar sintáctico)"
  },
  {
    "objectID": "ch2_p2_js_classes.html#objeto-literal-simple",
    "href": "ch2_p2_js_classes.html#objeto-literal-simple",
    "title": "Desarrollo en el cliente",
    "section": "Objeto Literal Simple",
    "text": "Objeto Literal Simple\nconst enemigo = {\n    vida: 100,\n    damage: 15,\n    atacar() {\n        return `Enemigo ataca causando ${this.damage} puntos`;\n    }\n};\n\n// Crear basado en prototipo\nconst goblin = Object.create(enemigo);\ngoblin.vida = 50;\ngoblin.damage = 8;\n\nconsole.log(goblin.atacar()); \n// \"Enemigo ataca causando 8 puntos\""
  },
  {
    "objectID": "ch2_p2_js_classes.html#herencia-con-prototipos",
    "href": "ch2_p2_js_classes.html#herencia-con-prototipos",
    "title": "Desarrollo en el cliente",
    "section": "Herencia con Prototipos",
    "text": "Herencia con Prototipos\nconst personajeBase = {\n    mover(x, y) {\n        this.x += x;\n        this.y += y;\n    }\n};\n\nconst protottipoJugador = Object.create(personajeBase);\nprotottipoJugador.atacar = function(objetivo) {\n    return `${this.nombre} ataca a ${objetivo.nombre}`;\n};\n\nconst jugador = Object.create(protottipoJugador);\njugador.nombre = \"Aragorn\";\njugador.x = 0;\njugador.y = 0;"
  },
  {
    "objectID": "ch2_p2_js_classes.html#acceso-a-propiedades",
    "href": "ch2_p2_js_classes.html#acceso-a-propiedades",
    "title": "Desarrollo en el cliente",
    "section": "Acceso a Propiedades",
    "text": "Acceso a Propiedades\nconst config = {\n    sonido: true,\n    volumen: 0.8,\n    idioma: \"es\"\n};\n\n// Notación punto (recomendado)\nconsole.log(config.sonido);\nconfig.volumen = 0.5;\n\n// Notación corchetes (propiedades dinámicas)\nconsole.log(config[\"idioma\"]);\nconst propiedad = \"volumen\";\nconsole.log(config[propiedad]);\n\n// Añadir propiedades dinámicamente\nconfig.dificultad = \"normal\";"
  },
  {
    "objectID": "ch2_p2_js_classes.html#iteración-sobre-propiedades",
    "href": "ch2_p2_js_classes.html#iteración-sobre-propiedades",
    "title": "Desarrollo en el cliente",
    "section": "Iteración sobre Propiedades",
    "text": "Iteración sobre Propiedades\nconst inventario = {\n    espada: 1,\n    pocion: 5,\n    oro: 150\n};\n\n// Iterar sobre propiedades\nfor (let item in inventario) {\n    console.log(`${item}: ${inventario[item]}`);\n}\n\n// Verificar existencia\nif (\"oro\" in inventario) {\n    console.log(\"El jugador tiene oro\");\n}\n\n// Arrays de claves y valores\nconst items = Object.keys(inventario);\nconst cantidades = Object.values(inventario);"
  },
  {
    "objectID": "ch2_p2_js_classes.html#null-vs-undefined",
    "href": "ch2_p2_js_classes.html#null-vs-undefined",
    "title": "Desarrollo en el cliente",
    "section": "null vs undefined",
    "text": "null vs undefined\nlet jugador = null;        // Ausencia intencional\nlet powerUp;              // undefined - no inicializada\n\n// Verificación segura\nif (jugador) {\n    jugador.mover(5, 0);\n}\n\n// Operador optional chaining (ES2020+)\njugador?.mover?.(5, 0);"
  },
  {
    "objectID": "ch2_p2_js_classes.html#función-constructor",
    "href": "ch2_p2_js_classes.html#función-constructor",
    "title": "Desarrollo en el cliente",
    "section": "Función Constructor",
    "text": "Función Constructor\nfunction Jugador(nombre, x, y) {\n    this.nombre = nombre;\n    this.x = x;\n    this.y = y;\n    this.vida = 100;\n}\n\n// Métodos en el prototipo\nJugador.prototype.mover = function(deltaX, deltaY) {\n    this.x += deltaX;\n    this.y += deltaY;\n};\n\n// Uso (siempre con 'new')\nconst player1 = new Jugador(\"Aragorn\", 10, 20);\nplayer1.mover(2, 3);"
  },
  {
    "objectID": "ch2_p2_js_classes.html#herencia-con-constructor",
    "href": "ch2_p2_js_classes.html#herencia-con-constructor",
    "title": "Desarrollo en el cliente",
    "section": "Herencia con Constructor",
    "text": "Herencia con Constructor\nfunction Personaje(nombre, vida) {\n    this.nombre = nombre;\n    this.vida = vida;\n}\n\nPersonaje.prototype.saludar = function() {\n    return `Hola, soy ${this.nombre}`;\n};\n\nfunction Guerrero(nombre, vida, fuerza) {\n    Personaje.call(this, nombre, vida);\n    this.fuerza = fuerza;\n}\n\nGuerrero.prototype = Object.create(Personaje.prototype);\nGuerrero.prototype.constructor = Guerrero;\n\nconst conan = new Guerrero(\"Conan\", 150, 25);"
  },
  {
    "objectID": "ch2_p2_js_classes.html#clases-es2015-sintaxis-moderna",
    "href": "ch2_p2_js_classes.html#clases-es2015-sintaxis-moderna",
    "title": "Desarrollo en el cliente",
    "section": "Clases ES2015+ (Sintaxis Moderna)",
    "text": "Clases ES2015+ (Sintaxis Moderna)\nclass GameObject {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.activo = true;\n    }\n\n    actualizar(deltaTime) {\n        if (!this.activo) return;\n    }\n\n    destruir() {\n        this.activo = false;\n    }\n}"
  },
  {
    "objectID": "ch2_p2_js_classes.html#herencia-con-clases",
    "href": "ch2_p2_js_classes.html#herencia-con-clases",
    "title": "Desarrollo en el cliente",
    "section": "Herencia con Clases",
    "text": "Herencia con Clases\nclass Enemigo extends GameObject {\n    constructor(x, y, tipo) {\n        super(x, y);  // Llamada al constructor padre\n        this.tipo = tipo;\n        this.vida = 50;\n        this.velocidad = 2;\n    }\n\n    actualizar(deltaTime) {\n        super.actualizar(deltaTime);\n        if (this.vida &gt; 0) {\n            this.x += this.velocidad;\n        }\n    }\n}"
  },
  {
    "objectID": "ch2_p2_js_classes.html#getters-y-setters",
    "href": "ch2_p2_js_classes.html#getters-y-setters",
    "title": "Desarrollo en el cliente",
    "section": "Getters y Setters",
    "text": "Getters y Setters\nclass Enemigo extends GameObject {\n    constructor(x, y, tipo) {\n        super(x, y);\n        this._vida = 50;\n    }\n\n    get estaVivo() {\n        return this._vida &gt; 0;\n    }\n\n    set vida(valor) {\n        this._vida = Math.max(0, valor);\n        if (this._vida === 0) {\n            this.destruir();\n        }\n    }\n\n    get vida() {\n        return this._vida;\n    }\n}"
  },
  {
    "objectID": "ch2_p2_js_classes.html#métodos-estáticos",
    "href": "ch2_p2_js_classes.html#métodos-estáticos",
    "title": "Desarrollo en el cliente",
    "section": "Métodos Estáticos",
    "text": "Métodos Estáticos\nclass Enemigo extends GameObject {\n    // Método estático\n    static crearOrc() {\n        const orc = new Enemigo(0, 0, \"Orc\");\n        orc.vida = 80;\n        orc.velocidad = 1.5;\n        return orc;\n    }\n}\n\n// Uso\nconst orc = Enemigo.crearOrc();"
  },
  {
    "objectID": "ch2_p2_js_classes.html#uso-de-clases",
    "href": "ch2_p2_js_classes.html#uso-de-clases",
    "title": "Desarrollo en el cliente",
    "section": "Uso de Clases",
    "text": "Uso de Clases\n// Constructor normal\nconst goblin = new Enemigo(10, 20, \"Goblin\");\ngoblin.vida = 30;\n\n// Usar getter (sin paréntesis)\nif (goblin.estaVivo) {\n    console.log(\"El goblin sigue vivo\");\n}\n\n// Método estático\nconst orc = Enemigo.crearOrc();\n\n// Polimorfismo\nconst enemigos = [goblin, orc];\nenemigos.forEach(enemigo =&gt; {\n    enemigo.actualizar(16);\n});"
  },
  {
    "objectID": "ch2_p2_js_classes.html#ventajas-de-clases-es2015",
    "href": "ch2_p2_js_classes.html#ventajas-de-clases-es2015",
    "title": "Desarrollo en el cliente",
    "section": "Ventajas de Clases ES2015+",
    "text": "Ventajas de Clases ES2015+\n\nSintaxis más clara: Más familiar para otros lenguajes OO\nHerencia simplificada: extends y super() más directos\nGetters y setters integrados: Validación y cálculo\nMétodos estáticos: Para funciones de clase\nMejor soporte de herramientas: IDEs y linters\n\n\n\n\n\n\n\nTip\n\n\nLa sintaxis de clases es la recomendada para proyectos nuevos"
  },
  {
    "objectID": "sub_introduction.html#prof.-rubén-rodríguez",
    "href": "sub_introduction.html#prof.-rubén-rodríguez",
    "title": "Presentación de Juegos en Red",
    "section": "Prof. Rubén Rodríguez",
    "text": "Prof. Rubén Rodríguez\nRubén Rodríguez Fernández\n\nE-mail: ruben.rodriguez@urjc.es. (Escribir por aula virtual).\nDespacho: 131, Ed. Departamental II (Campus de Móstoles).\nTutorias: Concertar por e-mail (aula virtual)."
  },
  {
    "objectID": "sub_introduction.html#prof.-natalia-madrueño",
    "href": "sub_introduction.html#prof.-natalia-madrueño",
    "title": "Presentación de Juegos en Red",
    "section": "Prof. Natalia Madrueño",
    "text": "Prof. Natalia Madrueño\nNatalia Madrueño Sierro\n\nEmail: natalia.madrueno@urjc.es (Escribir por aula virtual).\nDespacho: 044, Ed. Departamental II (Campus de Móstoles).\nTutorias: Concertar por e-mail (aula virtual)."
  },
  {
    "objectID": "sub_introduction.html#aplicaciones-en-red",
    "href": "sub_introduction.html#aplicaciones-en-red",
    "title": "Presentación de Juegos en Red",
    "section": "Aplicaciones en red",
    "text": "Aplicaciones en red\nLa gran mayoría de las aplicaciones actuales son aplicaciones basadas en red:\n\nAula Virtual\nGmail\nTwitter\nFacebook\nLa web de la Liga de Fútbol Profesional (LFP)\n…"
  },
  {
    "objectID": "sub_introduction.html#muchos-juegos-también",
    "href": "sub_introduction.html#muchos-juegos-también",
    "title": "Presentación de Juegos en Red",
    "section": "Muchos juegos también",
    "text": "Muchos juegos también\n\nPlayerUnknown’s Battlegrounds (PUBG) / Fortnite / Destiny 2 / Overwatch / Quake Champions / Counter-Strike: Global Offensive (CS:GO) / League of Legends (LoL) / DOTA 2\nWorld of Warcraft\nFIFA / PES\nMario Kart / Project Cars / Rocket League\nJuegos de Facebook\n…"
  },
  {
    "objectID": "sub_introduction.html#tema-1-introducción-a-los-juegos-en-red-y-a-las-redes-de-comunicaciones",
    "href": "sub_introduction.html#tema-1-introducción-a-los-juegos-en-red-y-a-las-redes-de-comunicaciones",
    "title": "Presentación de Juegos en Red",
    "section": "Tema 1: Introducción a los juegos en red y a las redes de comunicaciones",
    "text": "Tema 1: Introducción a los juegos en red y a las redes de comunicaciones\nSe presentan los retos de las aplicaciones en red y se introducen los principales conceptos necesarios para entender su funcionamiento:\n\nQué son y como funcionan las aplicaciones en red.\nProblemas propios de aplicaciones en red.\nConceptos fundamentales de comunicación en red entre aplicaciones.\nConsideraciones al desarrollar juegos en red."
  },
  {
    "objectID": "sub_introduction.html#tema-2-desarrollo-en-el-lado-del-cliente.",
    "href": "sub_introduction.html#tema-2-desarrollo-en-el-lado-del-cliente.",
    "title": "Presentación de Juegos en Red",
    "section": "Tema 2: Desarrollo en el lado del cliente.",
    "text": "Tema 2: Desarrollo en el lado del cliente.\nSe estudia el lenguaje JavaScript para construir aplicaciones en el lado del cliente (browser). API REST.\n\nDesarrollo web en JavaScript, HTML y CSS\nUso de las API REST"
  },
  {
    "objectID": "sub_introduction.html#tema-3-desarrollo-de-juegos-con-tecnología-web.",
    "href": "sub_introduction.html#tema-3-desarrollo-de-juegos-con-tecnología-web.",
    "title": "Presentación de Juegos en Red",
    "section": "Tema 3: Desarrollo de juegos con tecnología web.",
    "text": "Tema 3: Desarrollo de juegos con tecnología web.\nSe presenta el framework JavaScript Phaser para desarrollo de juegos en el cliente:\n\nPhaser 3 framework: https://phaser.io.\nAmplia galería de ejemplos: https://phaser.io/examples/"
  },
  {
    "objectID": "sub_introduction.html#tema-4-desarrollo-en-el-lado-del-servidor.",
    "href": "sub_introduction.html#tema-4-desarrollo-en-el-lado-del-servidor.",
    "title": "Presentación de Juegos en Red",
    "section": "Tema 4: Desarrollo en el lado del servidor.",
    "text": "Tema 4: Desarrollo en el lado del servidor.\nSe estudia el framework express.js con JavaScript para desarrollar el lado del servidor. Implementación de API REST:\n\nIntroducción a express.js\nDesarrollo de comunicación cliente servidor a través de API REST."
  },
  {
    "objectID": "sub_introduction.html#tema-5-comunicación-asíncrona-cliente---servidor",
    "href": "sub_introduction.html#tema-5-comunicación-asíncrona-cliente---servidor",
    "title": "Presentación de Juegos en Red",
    "section": "Tema 5: Comunicación asíncrona cliente - servidor",
    "text": "Tema 5: Comunicación asíncrona cliente - servidor\nSe estudia el uso de WebSockets para comunicación asíncrona entre nodos:\n\nIntroducción a la comunicación asíncrona con WebSockets.\nCreación de protocolos de mensajes.\nDesarrollo de comunicación asíncrona entre cliente y servidor con WebSockets."
  },
  {
    "objectID": "sub_introduction.html#material-teórico",
    "href": "sub_introduction.html#material-teórico",
    "title": "Presentación de Juegos en Red",
    "section": "Material teórico",
    "text": "Material teórico\n\nEl material se irá publicando en el Aula Virtual a medida que avance el cuatrimestre.\nSe publicará como asignatura en abierto, todos los materiales son públicos.\nContará con diapositivas, apuntes, problemas y una guía de estudio."
  },
  {
    "objectID": "sub_introduction.html#enunciado-de-la-práctica",
    "href": "sub_introduction.html#enunciado-de-la-práctica",
    "title": "Presentación de Juegos en Red",
    "section": "Enunciado de la práctica",
    "text": "Enunciado de la práctica\n\nLos enunciados de las prácticas se colgarán en el aula virtual."
  },
  {
    "objectID": "sub_introduction.html#pruebas-de-evaluación",
    "href": "sub_introduction.html#pruebas-de-evaluación",
    "title": "Presentación de Juegos en Red",
    "section": "Pruebas de evaluación:",
    "text": "Pruebas de evaluación:\n\n40% Pruebas teórico-prácticas\n\nNota mínima: cada prueba &gt;=5\n\n40% Práctica\n\nNota mínima: cada prueba &gt;=5\n\n15% Resolución de problemas y casos prácticos\n\nNo tiene nota mínima\n\n5% Participación en clase y otras actividades\n\nNo tiene nota mínima\n\n\nHay que obtener al menos un 5 de media"
  },
  {
    "objectID": "sub_introduction.html#pruebas-teórico-prácticas-40",
    "href": "sub_introduction.html#pruebas-teórico-prácticas-40",
    "title": "Presentación de Juegos en Red",
    "section": "Pruebas teórico-prácticas (40 %)",
    "text": "Pruebas teórico-prácticas (40 %)\n\n3 exámenes:\n\nExamen 1 (Tema 1): 35%.\nExamen 2 (Tema 2 y 3): 32.5%.\nExamen 3 (Tema 4): 32.5%.\n\nEjercicios online tipo test / preguntas cortas / ejercicios\nNota mínima en cada prueba 5\nRevaluable en convocatoria extraordinaria"
  },
  {
    "objectID": "sub_introduction.html#práctica-40",
    "href": "sub_introduction.html#práctica-40",
    "title": "Presentación de Juegos en Red",
    "section": "Práctica (40 %)",
    "text": "Práctica (40 %)\n\nSe realiza en grupos de 4 personas\nCada alumno será evaluado individualmente\nSe desarrolla en parte en las sesiones prácticas\nConsta de 4 entregas (fases) obligatorias coonderaciones 10%, 35%, 25%, 30%.\nNota mínima en cada fase: 5 puntos\nCada fase es revaluable en convocatoria extraordinaria"
  },
  {
    "objectID": "sub_introduction.html#resolución-de-problemas-15",
    "href": "sub_introduction.html#resolución-de-problemas-15",
    "title": "Presentación de Juegos en Red",
    "section": "Resolución de problemas (15 %)",
    "text": "Resolución de problemas (15 %)\n\nConsiste en una fase adicional al juego desarrollado (fase 5).\nConsistirá en una mejora sobre la práctica entregada y la publicación de la misma en plataformas online.\nNota mínima de 3.\nRevaluable en convocatoria extraordinaria."
  },
  {
    "objectID": "sub_introduction.html#participación-en-clase-5",
    "href": "sub_introduction.html#participación-en-clase-5",
    "title": "Presentación de Juegos en Red",
    "section": "Participación en clase (5 %)",
    "text": "Participación en clase (5 %)\n\nEs opcional. No tiene nota mínima.\nConsiste en una serie de actividades que se irán realizando a lo largo del cuatrimestre.\nTambién se podrán obtener proponiendo mejoras o correcciones a los apuntes y diapositivas de la asignatura.\nNo es revaluable en convocatoria extraordinaria"
  },
  {
    "objectID": "sub_introduction.html#dispensa-académica",
    "href": "sub_introduction.html#dispensa-académica",
    "title": "Presentación de Juegos en Red",
    "section": "Dispensa académica",
    "text": "Dispensa académica\nUn alumno con dispensa académica debe realizar los exámenes teóricos-prácticos.\nEstá obligado a hacer las 4 entregas presenciales de la parte práctica ya que son como exámenes.\nLas fechas de las pruebas serán anunciadas con anterioridad."
  },
  {
    "objectID": "sub_introduction.html#no-presentado",
    "href": "sub_introduction.html#no-presentado",
    "title": "Presentación de Juegos en Red",
    "section": "No presentado",
    "text": "No presentado\nUn alumno obtendrá la calificación de no presentado únicamente si no se presenta a ninguna prueba evaluable (ya sea de teoría o práctica)."
  },
  {
    "objectID": "sub_introduction.html#internet",
    "href": "sub_introduction.html#internet",
    "title": "Presentación de Juegos en Red",
    "section": "Internet",
    "text": "Internet\n\nPáginas oficiales de los estándares y tecnologías\nTutoriales, ejemplos y blogs realizados por la comunidad\nAplicaciones web de código abierto\n… y todo lo que Google encuentre :)"
  },
  {
    "objectID": "ch1_p3_network.html#qué-es-la-capa-de-red",
    "href": "ch1_p3_network.html#qué-es-la-capa-de-red",
    "title": "Capa de Red",
    "section": "¿Qué es la Capa de Red?",
    "text": "¿Qué es la Capa de Red?\n\nLa Capa de Red es el tercer nivel del modelo TCP/IP y forma el núcleo del sistema de comunicaciones de Internet\n\n\n\nFunción principal:\n\nProporcionar comunicación end-to-end entre dispositivos\nPotencialmente separados por múltiples redes intermedias\nIndependiente de la tecnología subyacente\n\n\n\n\n\n\n\n\nblock-beta\n    columns 1\n    \n    A[\"&lt;b&gt;Capa de Aplicación&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;HTTP, HTTPS, FTP, SMTP&lt;br/&gt;DNS, DHCP, Telnet, SSH\"]\n    \n    B[\"&lt;b&gt;Capa de Transporte&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;TCP, UDP&lt;br/&gt;Control de flujo y errores\"]\n    \n    C[\"&lt;b&gt;Capa de Internet&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;IP, ICMP, ARP&lt;br/&gt;Enrutamiento, Direccionamiento\"]\n    \n    D[\"&lt;b&gt;Capa de Acceso a la Red&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Ethernet, WiFi, PPP&lt;br/&gt;Frames, MAC Address&lt;br/&gt;Control de acceso al medio\"]\n    \n    classDef highlight fill:#ff9999,stroke:#cc0000,stroke-width:4px,color:#000\n    classDef normal fill:#e1f5fe,stroke:#0277bd,stroke-width:2px,color:#000\n    \n    class C highlight\n    class A,B, D normal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportante\n\n\nLa comunicación funciona de igual forma independientemente del medio físico utilizado"
  },
  {
    "objectID": "ch1_p3_network.html#ejemplo-simplificado-host-a-servidor-google",
    "href": "ch1_p3_network.html#ejemplo-simplificado-host-a-servidor-google",
    "title": "Capa de Red",
    "section": "Ejemplo Simplificado: Host A → Servidor Google",
    "text": "Ejemplo Simplificado: Host A → Servidor Google\nRed A (Privada)                    Internet                    Red B (Google DC)\n192.168.1.0/24                                                142.250.184.0/24\n┌────────────┐     ┌────────────────┐   ┌──────────┐   ┌─────────────────┐      ┌──────────────┐\n│   Host A   │─────│   Router-A     │───│          │───│    Router-B     │──────│ Servidor Web │\n│            │     │    (Casa)      │   │ Internet │   │   (Google DC)   │      │   (Google)   │\n│192.168.1.10│     │LAN:192.168.1.1 │   │          │   │WAN:74.125.24.1  │      │              │\n│            │     │WAN:203.0.113.2 │   └──────────┘   │LAN:142.250.184.1│      │142.250.184.3 │\n└────────────┘     └────────────────┘                  └─────────────────┘      └──────────────┘\n\n\n\n\n\n\nsequenceDiagram\n    participant A as Dispositivo A&lt;br/&gt;(192.168.1.10)\n    participant RA as Router-A&lt;br/&gt;(Casa)&lt;br/&gt;192.168.1.1\n    participant RB as Router-B&lt;br/&gt;(Google DC)&lt;br/&gt;142.250.184.1\n    participant B as Servidor Web&lt;br/&gt;(142.250.184.3)\n\n    Note over A: 1) Analiza IP destino&lt;br/&gt;2) No está en mi red&lt;br/&gt;3) Enviar al gateway\n\n    A-&gt;&gt;RA: Trama Ethernet&lt;br/&gt;MAC: A → Router-A&lt;br/&gt;IP: 192.168.1.10 → 142.250.184.3\n\n    Note over RA: 1) Extrae datagrama IP&lt;br/&gt;2) Consulta tabla enrutamiento&lt;br/&gt;3) Envía al siguiente salto\n\n    RA-&gt;&gt;RB: Nueva trama&lt;br/&gt;(múltiples saltos)\n\n    Note over RB: IP destino en red local\n\n    RB-&gt;&gt;B: Trama final\n\n    Note over B: Entrega a capa superior"
  },
  {
    "objectID": "ch1_p3_network.html#enrutamiento-vs-reenvío",
    "href": "ch1_p3_network.html#enrutamiento-vs-reenvío",
    "title": "Capa de Red",
    "section": "Enrutamiento vs Reenvío",
    "text": "Enrutamiento vs Reenvío\n\n\nEnrutamiento\nProceso global que determina rutas óptimas\n\nConsidera toda la topología de red\nTiempo: segundos a minutos\nAlgoritmos: RIP, OSPF, BGP\nGenera tabla de enrutamiento completa\n\n\nReenvío\nProceso local de mover paquetes\n\nPuerto entrada → puerto salida\nTiempo: microsegundos\nImplementado en hardware\nUsa tabla de reenvío optimizada\n\n\n\n\n\n\n\n\nTip\n\n\nLos algoritmos de enrutamiento generan la tabla de enrutamiento → se traduce en tabla de reenvío con next-hop"
  },
  {
    "objectID": "ch1_p3_network.html#responsabilidades-por-dispositivo",
    "href": "ch1_p3_network.html#responsabilidades-por-dispositivo",
    "title": "Capa de Red",
    "section": "Responsabilidades por Dispositivo",
    "text": "Responsabilidades por Dispositivo\n\n\nHost Emisor\n\nRecibe segmentos de TCP/UDP\nEncapsula en datagramas IP\nFragmenta si excede MTU\nDetermina si destino es local o remoto\n\nHost Receptor\n\nReensambla fragmentos\nVerifica integridad (checksum)\nExtrae segmentos\nEntrega a capa de transporte\n\n\nRouters Intermedios\n\nExaminan cabecera IP (dirección destino)\nConsultan tabla de enrutamiento\nDeterminan siguiente salto\nReenvían por interfaz correspondiente"
  },
  {
    "objectID": "ch1_p3_network.html#redes-de-circuitos-virtuales",
    "href": "ch1_p3_network.html#redes-de-circuitos-virtuales",
    "title": "Capa de Red",
    "section": "Redes de Circuitos Virtuales",
    "text": "Redes de Circuitos Virtuales\nFuncionamiento en 3 fases:\n\nEstablecimiento: SETUP, reserva recursos\nTransferencia: Usa VC ID, ruta fija\nTerminación: TEARDOWN, libera recursos\n\n\n\nVentajas:\n\nQoS predecible\nOverhead reducido (solo VC ID)\nOrden garantizado\n\n\nDesventajas:\n\nComplejidad alta\nMantiene estado por conexión\nRigidez ante cambios\n\n\nTecnologías: ATM, Frame Relay, X.25, MPLS"
  },
  {
    "objectID": "ch1_p3_network.html#redes-de-datagramas",
    "href": "ch1_p3_network.html#redes-de-datagramas",
    "title": "Capa de Red",
    "section": "Redes de Datagramas",
    "text": "Redes de Datagramas\n\n\nCaracterísticas:\n\nCada paquete tratado independientemente\nSin estado de conexión en routers\nDirección destino completa en cada paquete\nDiferentes rutas posibles por paquete\n\n\nVentajas:\n\nSimplicidad de diseño\nRobustez ante fallos\nFlexibilidad y balanceo de carga\nEscalabilidad superior\n\nLimitaciones:\n\nSin garantías QoS\nPosible desorden de paquetes\nServicio best-effort\n\n\n\n\n\n\n\n\nImportante\n\n\nFundamento de Internet por su adaptabilidad a condiciones cambiantes"
  },
  {
    "objectID": "ch1_p3_network.html#circuitos-virtuales-vs-datagramas",
    "href": "ch1_p3_network.html#circuitos-virtuales-vs-datagramas",
    "title": "Capa de Red",
    "section": "Circuitos Virtuales vs Datagramas",
    "text": "Circuitos Virtuales vs Datagramas\n\n\n\nAspecto\nCircuitos Virtuales\nDatagramas\n\n\n\n\nEstablecimiento\nRequerido\nNo requerido\n\n\nEstado en routers\nSí, por conexión\nNo\n\n\nDireccionamiento\nVC ID\nIP completa\n\n\nEnrutamiento\nRuta fija\nPor paquete\n\n\nQoS\nGarantías posibles\nBest effort\n\n\nRecuperación fallos\nDifícil\nAutomática\n\n\nEscalabilidad\nLimitada\nAlta\n\n\n\nInternet usa el modelo de datagramas por su simplicidad, robustez y escalabilidad"
  },
  {
    "objectID": "ch1_p3_network.html#arquitectura-del-router",
    "href": "ch1_p3_network.html#arquitectura-del-router",
    "title": "Capa de Red",
    "section": "Arquitectura del Router",
    "text": "Arquitectura del Router\n┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n│                 │    │                 │    │                 │\n│  Puertos de     │    │   Procesador    │    │  Puertos de     │\n│   Entrada       │◄──►│      de         │◄──►│   Salida        │\n│                 │    │  Enrutamiento   │    │                 │\n└─────────────────┘    └─────────────────┘    └─────────────────┘\n         ▲                        │                        ▲\n         │              ┌─────────▼─────────┐              │\n         │              │                   │              │\n         └──────────────│ Fabric de         │──────────────┘\n                        │ Conmutación       │\n                        │                   │\n                        └───────────────────┘\n\n\nPlano de Control:\n\nEjecuta enrutamiento (software)\nGenera tablas de enrutamiento\n\n\nPlano de Datos:\n\nEjecuta reenvío (hardware)\nPuertos entrada/salida + fabric"
  },
  {
    "objectID": "ch1_p3_network.html#proceso-de-reenvío-de-paquetes",
    "href": "ch1_p3_network.html#proceso-de-reenvío-de-paquetes",
    "title": "Capa de Red",
    "section": "Proceso de Reenvío de Paquetes",
    "text": "Proceso de Reenvío de Paquetes\n\nRecepción: Llega paquete, se procesa capa enlace, se extrae datagrama IP\nVerificación: Checksum de cabecera, TTL &gt; 0\nDecisión: Extrae IP destino, aplica longest prefix matching\nModificación: Decrementa TTL, recalcula checksum\nResolución: ARP si necesario para MAC siguiente salto\nEncapsulación: Nueva trama según protocolo salida\nTransmisión: Envío por interfaz física\n\n\n\n\n\n\n\nAdvertencia\n\n\nSi TTL llega a 0 → descarta paquete y envía ICMP “Time Exceeded”"
  },
  {
    "objectID": "ch1_p3_network.html#switches-layer-3",
    "href": "ch1_p3_network.html#switches-layer-3",
    "title": "Capa de Red",
    "section": "Switches Layer 3",
    "text": "Switches Layer 3\nUn switch Ethernet (L3) que combina switching de alta velocidad por hardware (ASICs) con capacidades básicas de enrutamiento IP para redes LAN. \n\n\n\nAspecto\nRouter Tradicional\nSwitch L3\n\n\n\n\nReenvío\nSoftware/ASIC\nHardware puro\n\n\nLatencia\nMicrosegundos\nNanosegundos\n\n\nThroughput\nLimitado por CPU\nWire-speed\n\n\nFlexibilidad\nAlta\nLimitada\n\n\n\n Los switches L3 combinan la velocidad del switching con las capacidades del routing. Útiles en redes locales."
  },
  {
    "objectID": "ch1_p3_network.html#protocolo-ip",
    "href": "ch1_p3_network.html#protocolo-ip",
    "title": "Capa de Red",
    "section": "Protocolo IP",
    "text": "Protocolo IP\n\n\nCaracterísticas fundamentales:\n\nSin conexión: No requiere establecimiento previo\nNo confiable: No garantiza entrega, orden, o integridad\nBest effort: Hace el “mejor esfuerzo” por entregar paquetes\nIndependiente del medio: Funciona sobre cualquier tecnología de enlace\n\n\nResponsabilidades principales:\n\nDefine estructura de datagramas\nEstablece sistema de direccionamiento\nMecanismos básicos de entrega\nFragmentación y reensamblado\nControl de vida del paquete (TTL)\n\n\n\n\n\n\n\n\nImportante\n\n\nIP NO garantiza: Entrega, orden entre datagramas diferentes, ni detección de duplicados. Estas funciones se delegan a capas superiores (TCP).\n\n\n\nVersiones: IPv4 (32 bits, diseñado años 70) e IPv6 (128 bits, soluciona limitaciones IPv4)"
  },
  {
    "objectID": "ch1_p3_network.html#ipv4-estructura-básica",
    "href": "ch1_p3_network.html#ipv4-estructura-básica",
    "title": "Capa de Red",
    "section": "IPv4: Estructura Básica",
    "text": "IPv4: Estructura Básica\n\n\n\n\n\n---\nconfig:\n  packet:\n    showBits: true\n---\npacket-beta\n\ntitle IPv4 Header Format\n0-3: \"Version (4)\"\n4-7: \"IHL (4)\"\n8-15: \"Type of Service (8)\"\n16-31: \"Total Length (16)\"\n32-47: \"Identification (16)\"\n48-50: \"Flags (3)\"\n51-63: \"Fragment Offset (13)\"\n64-71: \"Time to Live (8)\"\n72-79: \"Protocol (8)\"\n80-95: \"Header Checksum (16)\"\n96-127: \"Source Address (32)\"\n128-159: \"Destination Address (32)\"\n160-191: \"Options (variable)\"\n\n\n\n\n\n\n\nSource address y Destination address para identificación de hosts\nProtocol para identificar el protocolo de la capa superior\nChecksum para integridad de datos."
  },
  {
    "objectID": "ch1_p3_network.html#ipv4-direccionamiento",
    "href": "ch1_p3_network.html#ipv4-direccionamiento",
    "title": "Capa de Red",
    "section": "IPv4: Direccionamiento",
    "text": "IPv4: Direccionamiento\nFormato: 32 bits (4 octetos)\nEjemplo: 192.168.1.1 con máscara 255.255.255.0 (/24)\n\nParte azul: Red\nParte roja: Host\nTotal direcciones: 2³² ≈ 4.3 mil millones\n\nObtención dirección de red:\n192.168.1.1 AND 255.255.255.0 = 192.168.1.0\n\n\n\n\n\n\nTip\n\n\nLa división red/host permite enrutamiento jerárquico eficiente"
  },
  {
    "objectID": "ch1_p3_network.html#sistema-de-clases-histórico",
    "href": "ch1_p3_network.html#sistema-de-clases-histórico",
    "title": "Capa de Red",
    "section": "Sistema de Clases (Histórico)",
    "text": "Sistema de Clases (Histórico)\n\n\n\n\n\n\n\n\n\n\n\n\nClase\nRango\nBits Red\nBits Host\nRedes\nHosts/Red\nUso\n\n\n\n\nA\n0.0.0.0 - 127.255.255.255\n7\n24\n126\n16,777,214\nISPs, gobiernos\n\n\nB\n128.0.0.0 - 191.255.255.255\n14\n16\n16,384\n65,534\nUniversidades\n\n\nC\n192.0.0.0 - 223.255.255.255\n21\n8\n2,097,152\n254\nEmpresas pequeñas\n\n\n\n\n\n\n\n\n\nAdvertencia\n\n\nProblema: Organización con 1,000 hosts\n\nClase B: desperdicia 64,534 direcciones (98.5%)\nClase C: insuficiente"
  },
  {
    "objectID": "ch1_p3_network.html#cidr-solución-moderna",
    "href": "ch1_p3_network.html#cidr-solución-moderna",
    "title": "Capa de Red",
    "section": "CIDR: Solución Moderna",
    "text": "CIDR: Solución Moderna\nClassless Inter-Domain Routing\nNotación: 192.168.1.0/24 → 24 bits para red\nVentajas:\n\nAsignación flexible (cualquier potencia de 2)\nUtilización: 20-30% → 95-98%\nAgregación de rutas eficiente\n\nLongest Prefix Matching\nSeleccionamos en nuestra tabla de rutas aquella con la coincidencia mas grande.\nTabla con rutas:\n\n192.168.0.0/16\n192.168.1.0/24 ← Seleccionada\n192.168.1.128/25\n\nDestino 192.168.1.200 → Selecciona /24 (prefijo más largo)"
  },
  {
    "objectID": "ch1_p3_network.html#direcciones-especiales",
    "href": "ch1_p3_network.html#direcciones-especiales",
    "title": "Capa de Red",
    "section": "Direcciones Especiales",
    "text": "Direcciones Especiales\nDirecciones Reservadas\n\n\n\nDirección\nPropósito\nDescripción\n\n\n\n\n0.0.0.0/32\nEste host\nSin IP configurada (DHCP)\n\n\n127.0.0.0/8\nLoopback\nPruebas locales (127.0.0.1)\n\n\n255.255.255.255/32\nLimited broadcast\nSolo red local\n\n\nx.x.x.0\nDirección de red\nIdentifica la red\n\n\nx.x.x.255\nDirected broadcast\nBroadcast a red específica\n\n\n\nRangos Privados (RFC 1918)\n\n10.0.0.0/8 → 16.7 millones hosts (grandes organizaciones)\n172.16.0.0/12 → 1 millón hosts (empresas medianas)\n192.168.0.0/16 → 65,000 hosts (hogares/oficinas)\n\n\nNo enrutables en Internet público → Requieren NAT"
  },
  {
    "objectID": "ch1_p3_network.html#direcciones-especiales-práctica",
    "href": "ch1_p3_network.html#direcciones-especiales-práctica",
    "title": "Capa de Red",
    "section": "Direcciones Especiales (Práctica)",
    "text": "Direcciones Especiales (Práctica)\n\nBroadcast: Cuando queremos enviar un paquete a todos los dispositivos de la red local. Ejemplo: 192.168.1.255 (para red 192.168.1.0/24)\n\nifconfig\nipconfig /all en windows\n\nGateway: Dirección del router que conecta nuestra red local con otras redes/Internet. Ejemplo: 192.168.1.1 (típicamente la primera IP utilizable de la red)\n\nroute -n get default (macOS/Linux)\nip route show default (Linux)\nipconfig /all (Windows)"
  },
  {
    "objectID": "ch1_p3_network.html#fragmentación",
    "href": "ch1_p3_network.html#fragmentación",
    "title": "Capa de Red",
    "section": "Fragmentación",
    "text": "Fragmentación\nMTU (Maximum Transmission Unit)\n\n\n\nTecnología\nMTU (bytes)\n\n\n\n\nEthernet\n1500\n\n\nToken Ring\n4464\n\n\nFDDI\n4352\n\n\nPPP\nVariable (~1500)\n\n\n\nProceso:\n\nSi datagrama &gt; MTU → fragmentar\nEnviar fragmentos por separado\nReensamblar en destino\nIP preserva integridad del datagrama original\n\n\n\n\n\n\n\nImportante\n\n\nIP garantiza orden dentro del datagrama, NO entre datagramas diferentes"
  },
  {
    "objectID": "ch1_p3_network.html#ipv6-la-evolución",
    "href": "ch1_p3_network.html#ipv6-la-evolución",
    "title": "Capa de Red",
    "section": "IPv6: La Evolución",
    "text": "IPv6: La Evolución\nMotivación\n\n\nLimitaciones IPv4:\n\nAgotamiento de direcciones (4.3×10^{9})\nFragmentación ineficiente en routers\nSin autoconfiguración\nSeguridad opcional (IPSec)\nQoS limitado\n\n\nCaracterísticas IPv6\n\nDirecciones: 128 bits (3.4×10^{38} direcciones)\nCabecera: Fija 40 bytes\nSin checksum en cabecera\nIPSec obligatorio\nAutoconfiguración SLAAC\nMejor QoS (Traffic Class, Flow Label)"
  },
  {
    "objectID": "ch1_p3_network.html#cabecera-ipv6",
    "href": "ch1_p3_network.html#cabecera-ipv6",
    "title": "Capa de Red",
    "section": "Cabecera IPv6",
    "text": "Cabecera IPv6\n\n\n\n\n\n\n---\nconfig:\n  packet:\n    showBits: true\n---\npacket-beta\n\n0-3: \"Version (4)\"\n4-11: \"Traffic Class (8)\"\n12-31: \"Flow Label (20)\"\n32-47: \"Payload Length (16)\"\n48-55: \"Next Header (8)\"\n56-63: \"Hop Limit (8)\"\n64-191: \"Source Address (128 bits)\"\n192-319: \"Destination Address (128 bits)\"\n\n\n\n\n\n\n\n\nMigración gradual IPv4 → IPv6 mediante mecanismos de interoperabilidad\nLas direcciones IP ahora ocupan el doble de tamaño\nSe elimina el checksum\nEl siguiente protocolo es ahora “Next Header”"
  },
  {
    "objectID": "ch1_p3_network.html#icmp-control-y-diagnóstico",
    "href": "ch1_p3_network.html#icmp-control-y-diagnóstico",
    "title": "Capa de Red",
    "section": "ICMP: Control y Diagnóstico",
    "text": "ICMP: Control y Diagnóstico\nInternet Control Message Protocol\nCaracterísticas:\n\nComplementario a IP\nUsa IP para transporte\nNo orientado a conexión\nImplementación obligatoria (en IPv6)\n\nTipos de Mensajes\n\n\nMensajes de Error:\n\nDestination Unreachable (Type 3)\nTime Exceeded (Type 11)\nParameter Problem (Type 12)\nPacket Too Big (IPv6)\n\n\nMensajes de Consulta:\n\nEcho Request/Reply (Type 8/0)\nTimestamp Request/Reply (Type 13/14)"
  },
  {
    "objectID": "ch1_p3_network.html#icmp-herramientas-de-diagnóstico",
    "href": "ch1_p3_network.html#icmp-herramientas-de-diagnóstico",
    "title": "Capa de Red",
    "section": "ICMP: Herramientas de Diagnóstico",
    "text": "ICMP: Herramientas de Diagnóstico\nPing - Verificación de Conectividad\n$ ping 8.8.8.8\nPING 8.8.8.8 (8.8.8.8): 56 data bytes\n64 bytes from 8.8.8.8: icmp_seq=0 ttl=55 time=15.1 ms\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=55 time=14.9 ms\nEcho Request (Type 8) → Echo Reply (Type 0)\n\nTraceroute - Descubrimiento de Ruta\n$ traceroute google.com\n 1  192.168.1.1 (192.168.1.1)  3.414 ms\n 2  100.70.0.1 (100.70.0.1)  5.245 ms\n 3  10.14.0.53 (10.14.0.53)  7.091 ms\n 4  * * *\n 5  72.14.195.182 (72.14.195.182)  4.665 ms\nIncrementa TTL progresivamente → Time Exceeded (Type 11)"
  },
  {
    "objectID": "ch1_p3_network.html#nat-network-address-translation",
    "href": "ch1_p3_network.html#nat-network-address-translation",
    "title": "Capa de Red",
    "section": "NAT: Network Address Translation",
    "text": "NAT: Network Address Translation\nProblema y Solución\n\n\nProblema:\n\nAgotamiento direcciones IPv4\nMúltiples dispositivos, una IP pública\n\nSolución NAT:\n\nUsa direcciones privadas internamente\nTraduce a IP pública en router\nMantiene tabla de traducción\n\n\nFuncionamiento:\n\nHost interno inicia conexión\nRouter reemplaza IP:puerto origen\nRegistra en tabla NAT\nRespuesta llega a router\nConsulta tabla y reenvía internamente"
  },
  {
    "objectID": "ch1_p3_network.html#nat-ejemplo-práctico",
    "href": "ch1_p3_network.html#nat-ejemplo-práctico",
    "title": "Capa de Red",
    "section": "NAT: Ejemplo Práctico",
    "text": "NAT: Ejemplo Práctico\nRed Interna (192.168.1.0/24)          NAT Router          Internet\n                                    (203.0.113.100)\n                                                           \n┌─────────────┐                    ┌─────────────┐     ┌─────────────┐\n│Host A       │ ────────────────── │             │ ─── │Servidor Web │\n│192.168.1.10 │ Src: 192.168.1.10  │   Tabla     │     │8.8.8.8:80   │\n│Port: 12345  │ Dst: 8.8.8.8:80    │     NAT     │     └─────────────┘\n└─────────────┘                    │             │\n                                   │192.168.1.10:│ Src: 203.0.113.100:5001\n┌─────────────┐                    │12345 → 5001 │ Dst: 8.8.8.8:80\n│Host B       │ ────────────────── │             │\n│192.168.1.20 │ Src: 192.168.1.20  │192.168.1.20:│\n│Port: 54321  │ Dst: 8.8.8.8:80    │54321 → 5002 │\n└─────────────┘                    └─────────────┘\n\n\nTraducción de direcciones: El router NAT convierte las IP privadas a su IP pública\nMapeo de puertos: Asigna puertos únicos externos (5001, 5002) a cada host interno para distinguir las conexiones simultáneas en la tabla NAT\nEnmascaramiento de red interna: Permite que múltiples dispositivos privados compartan una sola IP pública"
  },
  {
    "objectID": "ch1_p3_network.html#nat-limitaciones-y-soluciones",
    "href": "ch1_p3_network.html#nat-limitaciones-y-soluciones",
    "title": "Capa de Red",
    "section": "NAT: Limitaciones y Soluciones",
    "text": "NAT: Limitaciones y Soluciones\nLimitaciones\n\nNo permite conexiones entrantes directas\nComplicaciones con protocolos que embeben IPs\nPérdida del principio end-to-end\n\nTécnicas para Atravesar NAT\n\n\nHole Punching:\n\nAmbos conectan simultáneamente\nCrea “agujeros” temporales\n\nSTUN:\n\nDescubre IP pública y tipo NAT\nÚtil para VoIP/tiempo real\n\n\nTURN:\n\nServidor relay intermedio\nMás confiable pero más recursos\n\nUPnP:\n\nConfiguración automática de puertos\nConveniente pero riesgos de seguridad"
  },
  {
    "objectID": "ch1_p3_network.html#hole-punching",
    "href": "ch1_p3_network.html#hole-punching",
    "title": "Capa de Red",
    "section": "Hole punching",
    "text": "Hole punching\n\n\n\n\n\n\n\n\nsequenceDiagram\n    participant A as Alice\n    participant NA as NAT-A\n    participant S as STUN Server\n    participant NB as NAT-B\n    participant B as Bob\n\n    Note over A,B: 1. Discovery & Exchange\n    A-&gt;&gt;S: Register\n    S-&gt;&gt;A: Bob: 198.76.54.32:37000\n    B-&gt;&gt;S: Register\n    S-&gt;&gt;B: Alice: 203.45.67.89:42000\n    \n    Note over A,B: 2. Simultaneous Hole Punching\n    par Alice to Bob\n        A-&gt;&gt;NA: Send to Bob\n        Note over NA: Map: Allow from&lt;br/&gt;198.76.54.32:37000\n        NA-&gt;&gt;NB: Packet\n    and Bob to Alice\n        B-&gt;&gt;NB: Send to Alice\n        Note over NB: Map: Allow from&lt;br/&gt;203.45.67.89:42000\n        NB-&gt;&gt;NA: Packet\n    end\n    \n    Note over NA,NB: NAT holes ready when packets arrive\n    NA-&gt;&gt;A: Bob's packet passes\n    NB-&gt;&gt;B: Alice's packet passes\n\n\n\n\n\n\n\n\n\nDescubrimiento: servidor STUN para obtener sus IPs/puertos\nEnvío simultáneo: Envían paquetes UDP al mismo tiemp -&gt; mappings en sus NATs\nAgujeros listos: Los mappings NAT se crean ANTES de recibir"
  },
  {
    "objectID": "ch1_p3_network.html#puntos-clave",
    "href": "ch1_p3_network.html#puntos-clave",
    "title": "Capa de Red",
    "section": "Puntos Clave",
    "text": "Puntos Clave\n\nLa Capa de Red proporciona comunicación end-to-end entre dispositivos en diferentes redes\nDos funciones principales: Enrutamiento (global) y Reenvío (local)\nModelos de servicio: Circuitos Virtuales vs Datagramas (Internet usa datagramas)\nIPv4: 32 bits, sistema de clases → CIDR para eficiencia\nIPv6: 128 bits, soluciona limitaciones de IPv4\nICMP: Herramientas de diagnóstico (ping, traceroute)\nNAT: Permite compartir IP pública, pero limita conectividad directa\nMTU: Define tamaño máximo, fragmentación si se excede\nLos routers operan con plano de control (enrutamiento) y plano de datos (reenvío)"
  },
  {
    "objectID": "exercises/intro.html#instalación-previa",
    "href": "exercises/intro.html#instalación-previa",
    "title": "",
    "section": "Instalación previa",
    "text": "Instalación previa\nAntes de ejecutar los juegos, instala el paquete necesario:\nnpm install readline-sync"
  },
  {
    "objectID": "exercises/intro.html#juego-1-piedra-papel-o-tijera",
    "href": "exercises/intro.html#juego-1-piedra-papel-o-tijera",
    "title": "",
    "section": "Juego 1: Piedra, Papel o Tijera",
    "text": "Juego 1: Piedra, Papel o Tijera\nReglas: - Mínimo 5 rondas - Para ganar el juego debe haber una diferencia de al menos 1 punto - Usa números aleatorios: Math.floor(Math.random() * 3) - Lee entrada con: readlineSync.question('Elige: piedra, papel o tijera: '). Hacer un const readlineSync = require('readline-sync'); al principio del archivo."
  },
  {
    "objectID": "exercises/intro.html#juego-2-adivina-el-número",
    "href": "exercises/intro.html#juego-2-adivina-el-número",
    "title": "",
    "section": "Juego 2: Adivina el Número",
    "text": "Juego 2: Adivina el Número\nReglas: - Adivina un número entre 1 y 100 (incluidos) - El juego da pistas: “muy alto” o “muy bajo” - Cuenta los intentos hasta acertar"
  },
  {
    "objectID": "exercises/intro.html#ejecución",
    "href": "exercises/intro.html#ejecución",
    "title": "",
    "section": "Ejecución",
    "text": "Ejecución\nnode piedrapapeltijera.js\nnode adivinanumero.js\n¡Listo para jugar! 🎮"
  },
  {
    "objectID": "ch2_p1_js.html#introducción",
    "href": "ch2_p1_js.html#introducción",
    "title": "Desarrollo en el cliente",
    "section": "Introducción",
    "text": "Introducción\nJavaScript es el lenguaje fundamental para desarrollo web interactivo y videojuegos web.\n\n\nCaracterísticas principales:\n\nScripting (no necesita compilador)\nTipado dinámico\nFuncional\nOrientado a objetos (prototipos)\n\n\nAplicaciones:\n\nInteractividad en páginas web\nModificación del DOM\nPeticiones AJAX\nVideojuegos web"
  },
  {
    "objectID": "ch2_p1_js.html#versiones-de-ecmascript",
    "href": "ch2_p1_js.html#versiones-de-ecmascript",
    "title": "Desarrollo en el cliente",
    "section": "Versiones de ECMAScript",
    "text": "Versiones de ECMAScript\n\nPrimera versión en 10 días (1995).\nES5 (2011): Base sólida que estableció JavaScript moderno en todos los navegadores\nES6/ES2015: Revolución del lenguaje - introdujo sintaxis moderna que cambió cómo programamos\nActualizaciones anuales: Cada año se añaden mejoras sin romper código existente (compatibilidad hacia atrás)\nES2015 marcó un antes y después: La mayoría del código moderno usa características de ES6+\n\n\n\n\nVersión\nAño\nCaracterísticas\n\n\n\n\nES5\n2011\nPopularizó JavaScript\n\n\nES2015 (ES6)\n2015\nClases, módulos, arrow functions, promises\n\n\nES2016-2024\n2016-2024\nActualizaciones anuales con compatibilidad\n\n\n\n\nES2015 fue un punto de inflexión importante en la evolución del lenguaje."
  },
  {
    "objectID": "ch2_p1_js.html#javascript-vs-java",
    "href": "ch2_p1_js.html#javascript-vs-java",
    "title": "Desarrollo en el cliente",
    "section": "JavaScript vs Java",
    "text": "JavaScript vs Java\n\n\n\n\n\n\n¡Importante!\n\n\nAunque la sintaxis recuerda a Java, son lenguajes completamente diferentes.\n\n\n\n\nEl nombre “JavaScript” fue puro marketing: Se eligió para aprovechar la popularidad de Java\nInicialmente se llamó LiveScript: Cambió de nombre antes de su lanzamiento oficial\nJava estaba en auge cuando se publicó JavaScript (1995)\nDiferentes propósitos: Java para aplicaciones robustas, JavaScript para web interactivo"
  },
  {
    "objectID": "ch2_p1_js.html#dom-y-bom",
    "href": "ch2_p1_js.html#dom-y-bom",
    "title": "Desarrollo en el cliente",
    "section": "DOM y BOM",
    "text": "DOM y BOM\nDOM (Document Object Model)\n\nRepresenta HTML como árbol de objetos: Cada etiqueta HTML es un objeto manipulable\nModificación dinámica: Cambia contenido sin recargar la página completa\nGestión de eventos: Captura clicks, teclas, movimientos del ratón, etc.\nEjemplo: document.getElementById('boton') accede a un elemento\n\nBOM (Browser Object Model)\n\nControla el navegador entero: No solo el documento, sino ventanas, historial, URL\nwindow.location: Navega a otras URLs o recarga la página\nwindow.history: Retrocede/avanza en el historial del navegador\nwindow.localStorage: Guarda datos en el navegador\nEl BOM contiene al DOM: window.document es el DOM"
  },
  {
    "objectID": "ch2_p1_js.html#librerías-javascript",
    "href": "ch2_p1_js.html#librerías-javascript",
    "title": "Desarrollo en el cliente",
    "section": "Librerías JavaScript",
    "text": "Librerías JavaScript\nPara videojuegos:\n\nPhaser: Framework completo para juegos 2D - maneja física, colisiones, animaciones\n\nHerramientas de desarrollo:\n\nWebpack: Empaquetador de módulos - combina y optimiza tu código JavaScript y assets\nBabel: Transpilador - convierte código JavaScript moderno a versiones compatibles con navegadores antiguos\n\nBackend y comunicación:\n\nExpress.js: Framework minimalista para crear servidores web y APIs en Node.js\nWS (ws.js): Biblioteca para WebSockets - permite comunicación en tiempo real bidireccional"
  },
  {
    "objectID": "ch2_p1_js.html#node.js",
    "href": "ch2_p1_js.html#node.js",
    "title": "Desarrollo en el cliente",
    "section": "Node.js",
    "text": "Node.js\n\nEjecuta JavaScript fuera del navegador: En tu ordenador, servidores, etc.\nnpm (Node Package Manager): Gestor de paquetes para instalar librerías\nEntorno de desarrollo moderno: Necesario para usar herramientas como Webpack\n\nNode.js permite ejecutar JavaScript fuera del navegador.\nInstalación:\n\nDescargar desde nodejs.org\nInstalar versión LTS (Long Term Support - más estable)\n\nVerificar instalación:\n# Muestra la versión de Node.js instalada\nnode --version\n\n# Muestra la versión de npm (viene incluido con Node)\nnpm --version"
  },
  {
    "objectID": "ch2_p1_js.html#inicializar-un-proyecto",
    "href": "ch2_p1_js.html#inicializar-un-proyecto",
    "title": "Desarrollo en el cliente",
    "section": "Inicializar un Proyecto",
    "text": "Inicializar un Proyecto\n\nnpm init -y: Crea package.json con configuración por defecto (sin preguntas)\npackage.json: Archivo que describe tu proyecto y sus dependencias\nsrc/: Carpeta con tu código fuente JavaScript\ndist/: Carpeta con archivos finales optimizados listos para producción\npublic/: Recursos estáticos como HTML, imágenes, CSS que no se procesan\n\n# Inicializar proyecto npm (crea package.json) dentro de una carpeta\nnpm init -y\nEstructura recomendada:\nmi-juego-web/\n├── package.json       # Configuración del proyecto\n├── webpack.config.js  # Configuración de Webpack\n├── src/              # Tu código fuente\n├── dist/             # Archivos compilados (generado)\n└── public/           # HTML y recursos estáticos\n    └── index.html"
  },
  {
    "objectID": "ch2_p1_js.html#instalación-de-dependencias",
    "href": "ch2_p1_js.html#instalación-de-dependencias",
    "title": "Desarrollo en el cliente",
    "section": "Instalación de Dependencias",
    "text": "Instalación de Dependencias\n\nDependencias de producción: Librerías que necesita tu juego para funcionar\nDependencias de desarrollo: Herramientas solo para programar (no van al juego final)\nnpm install: Descarga e instala paquetes desde el registro de npm\n–save-dev: Marca como dependencia de desarrollo\n\nDependencias de producción:\n# Phaser: motor de juegos 2D\n# Lodash: utilidades para datos\n# Axios: peticiones HTTP\nnpm install phaser lodash axios\nDependencias de desarrollo:\n# Webpack: empaqueta y optimiza código\nnpm install --save-dev webpack webpack-cli webpack-dev-server\n\n# Plugins de Webpack para HTML y CSS\nnpm install --save-dev html-webpack-plugin css-loader style-loader\n\n# Herramientas de calidad de código\nnpm install --save-dev eslint prettier"
  },
  {
    "objectID": "ch2_p1_js.html#configuración-de-webpack",
    "href": "ch2_p1_js.html#configuración-de-webpack",
    "title": "Desarrollo en el cliente",
    "section": "Configuración de Webpack",
    "text": "Configuración de Webpack\n\nWebpack: Empaquetador que une todos tus archivos JS en uno solo optimizado\nentry: Punto de entrada - primer archivo que se ejecuta\noutput: Dónde guardar el resultado final\nplugins: Extensiones que añaden funcionalidades (ej: generar HTML)\ndevServer: Servidor de desarrollo con recarga automática\n\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  // **entry**: Punto de entrada de la aplicación\n  entry: './src/index.js',\n\n  // **output**: Dónde se guarda el bundle generado\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n    clean: true // Limpia la carpeta 'dist' antes de cada build\n  },\n\n  // **plugins**: Añade funcionalidades extra (como generar el HTML automáticamente)\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './public/index.html', // Usa esta plantilla HTML\n      filename: 'index.html' // Nombre del archivo generado\n    })\n  ],\n\n  // **devServer**: Configuración del servidor de desarrollo con recarga automática\n  devServer: {\n    static: {\n      directory: path.join(__dirname, 'dist')\n    },\n    compress: true,\n    port: 3000,\n    open: true, // Abre el navegador automáticamente\n    hot: true // Habilita hot-reload\n  },\n\n  // Configuración para trabajar con archivos JS modernos\n  module: {\n    rules: [\n      {\n        test: /\\.js$/, // Aplica a archivos .js\n        exclude: /node_modules/, // Ignora node_modules\n        use: {\n          loader: 'babel-loader' // Transpila JS moderno a compatible\n        }\n      }\n    ]\n  },\n\n  // Modo por defecto si no se especifica en el script\n  mode: 'development'\n};"
  },
  {
    "objectID": "ch2_p1_js.html#scripts-de-desarrollo",
    "href": "ch2_p1_js.html#scripts-de-desarrollo",
    "title": "Desarrollo en el cliente",
    "section": "Scripts de Desarrollo",
    "text": "Scripts de Desarrollo\n\nScripts npm: Comandos personalizados para automatizar tareas comunes\nnpm run dev: Inicia servidor de desarrollo con recarga automática\nnpm run build: Crea versión optimizada para producción\nnpm run lint: Revisa errores de código con ESLint\nnpm run format: Formatea código con Prettier\n\npackage.json:\n{\n  \"scripts\": {\n    // Construye el paquete para producción usando Webpack\n    \"build\": \"webpack --mode production\",\n\n    // Inicia el servidor de desarrollo con Webpack Dev Server y habilita hot-reload\n    \"dev\": \"webpack serve --mode development\",\n\n    // Inicia el servidor en modo producción (requiere que server.js esté correctamente configurado)\n    \"start\": \"node server.js\",\n\n    // Observa los cambios en los archivos y recompila automáticamente (sin servidor)\n    \"watch\": \"webpack --watch\",\n  }\n}"
  },
  {
    "objectID": "ch2_p1_js.html#características-del-lenguaje",
    "href": "ch2_p1_js.html#características-del-lenguaje",
    "title": "Desarrollo en el cliente",
    "section": "Características del Lenguaje",
    "text": "Características del Lenguaje\n\nImperativo y Estructurado: Escribe instrucciones paso a paso, como Java o C\nLenguaje de Script: El navegador ejecuta el código directamente, sin compilar primero\nTipado Dinámico: Las variables pueden cambiar de tipo (let x = 5; x = \"texto\";)\nOrientado a Objetos: Usa prototipos en lugar de clases tradicionales (hasta ES6)\nFuncional: Las funciones son valores - pueden pasarse como argumentos"
  },
  {
    "objectID": "ch2_p1_js.html#modo-estricto",
    "href": "ch2_p1_js.html#modo-estricto",
    "title": "Desarrollo en el cliente",
    "section": "Modo Estricto",
    "text": "Modo Estricto\n\nDetecta errores que normalmente JavaScript ignora: Convierte errores silenciosos en excepciones\nProhíbe sintaxis peligrosa: Variables sin declarar, duplicar parámetros, etc.\nMejor rendimiento: Permite optimizaciones del motor JavaScript\nEn módulos ES2015+ ya está activo: No necesitas añadirlo manualmente\nTambién se puede utiliziar node --use_strict en node.\n\n// Activar modo estricto (poner al inicio del archivo o función)\n\"use strict\";\n\n// Ahora esto genera error (sin strict mode, crea variable global)\nplayerName = \"Juan\"; // Error: playerName is not defined"
  },
  {
    "objectID": "ch2_p1_js.html#integración-con-html",
    "href": "ch2_p1_js.html#integración-con-html",
    "title": "Desarrollo en el cliente",
    "section": "Integración con HTML",
    "text": "Integración con HTML\n\nScripts en &lt;head&gt;: Se ejecutan antes de cargar el contenido (puede bloquear renderizado)\nScripts al final de &lt;body&gt;: Mejor práctica - el HTML ya está cargado\nasync: Descarga el script en paralelo, ejecuta en cuanto esté listo (orden no garantizado)\ndefer: Descarga en paralelo, pero ejecuta en orden después del HTML\n\n&lt;html&gt;\n&lt;head&gt;\n    &lt;!-- Script en head - se ejecuta inmediatamente --&gt;\n    &lt;script src=\"js/config.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- Contenido HTML --&gt;\n    &lt;!-- Scripts al final - mejor rendimiento (HTML ya cargado) --&gt;\n    &lt;script src=\"js/game.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- async: descarga paralela, ejecuta inmediatamente --&gt;\n    &lt;script src=\"js/game.js\" async&gt;&lt;/script&gt;\n\n    &lt;!-- defer: descarga paralela, ejecuta después del HTML --&gt;\n    &lt;script src=\"js/game.js\" defer&gt;&lt;/script&gt;    \n&lt;/body&gt;\n&lt;/html&gt;"
  },
  {
    "objectID": "ch2_p1_js.html#mostrar-información",
    "href": "ch2_p1_js.html#mostrar-información",
    "title": "Desarrollo en el cliente",
    "section": "Mostrar Información",
    "text": "Mostrar Información\n\ndocument.write(): Escribe directamente en el HTML (evitar - obsoleto)\nconsole.log(): Muestra información en consola del navegador (F12)\nconsole.error(): Muestra errores en rojo - útil para debugging\nconsole.warn(): Muestra advertencias en amarillo\n\n// Escribir en el documento HTML (no recomendado)\ndocument.write('Texto');\n\n// Consola del navegador (debugging) - Pulsa F12 para verla\nconsole.log('Información de debug');\nconsole.error('Error crítico');\nconsole.warn('Advertencia');\n\n// También puedes mostrar objetos\nconsole.log('Jugador:', { nombre: 'Juan', vida: 100 });"
  },
  {
    "objectID": "ch2_p1_js.html#comentarios",
    "href": "ch2_p1_js.html#comentarios",
    "title": "Desarrollo en el cliente",
    "section": "Comentarios",
    "text": "Comentarios\n\nIgual que en Java.\n\n// Comentario de una línea - se ignora al ejecutar\n\n/*\n * Comentario\n * multilínea\n * útil para documentar funciones\n */\n\n// Los comentarios explican el \"por qué\", no el \"qué\"\n// Malo: let x = 5; // Asigna 5 a x\n// Bueno: let maxRetries = 5; // Límite de reintentos antes de fallar"
  },
  {
    "objectID": "ch2_p1_js.html#variables",
    "href": "ch2_p1_js.html#variables",
    "title": "Desarrollo en el cliente",
    "section": "Variables",
    "text": "Variables\n\nconst: Usa por defecto - evita modificaciones accidentales de valores que no deben cambiar\nlet: Solo cuando necesites reasignar el valor (contadores, acumuladores)\nvar: Obsoleto - tiene problemas de scope que causan bugs difíciles de encontrar\nBlock scope: Variables solo existen dentro del bloque {} donde se declaran\n\n// const - valor inmutable (no se puede reasignar), block scope\nconst MAX_LIVES = 3;\nconst GAME_CONFIG = {\n    width: 800,\n    height: 600\n};\n\n// let - valor mutable (se puede reasignar), block scope\nlet currentLives = MAX_LIVES;\nlet playerPosition = { x: 0, y: 0 };\n\n// var - evitar en código nuevo (function scope - problemas)\nvar oldStyle = \"no recomendado\";\n\n// Ejemplos de uso\ncurrentLives = 2; // OK - let permite reasignar\nMAX_LIVES = 5; // ERROR - const no permite reasignar"
  },
  {
    "objectID": "ch2_p1_js.html#ámbito-de-variables",
    "href": "ch2_p1_js.html#ámbito-de-variables",
    "title": "Desarrollo en el cliente",
    "section": "Ámbito de Variables",
    "text": "Ámbito de Variables\n\nBlock scope (let, const): Variable solo existe dentro de las llaves {} donde se declaró\nFunction scope (var): Variable existe en toda la función, ignorando bloques {}\nVariables sin declarar: Se vuelven globales (accesibles desde cualquier lugar) - PELIGROSO\nModo estricto: Convierte variables sin declarar en error\n\nfunction ejemploScope() {\n    if (true) {\n        let bloqueVariable = \"solo aquí\";\n        var funcionVariable = \"toda la función\";\n    }\n    \n    // console.log(bloqueVariable); // ERROR - no existe fuera del if\n    console.log(funcionVariable);   // OK - var tiene function scope\n}\n\n// Sin modo estricto\nfunction peligro() {\n    sinDeclarar = \"ups\"; // Crea variable global - BAD!\n}"
  },
  {
    "objectID": "ch2_p1_js.html#tipos-de-datos-primitivos",
    "href": "ch2_p1_js.html#tipos-de-datos-primitivos",
    "title": "Desarrollo en el cliente",
    "section": "Tipos de Datos Primitivos",
    "text": "Tipos de Datos Primitivos\n\nNumber: Un solo tipo para enteros y decimales (64 bits de precisión)\nString: Cadenas de texto - pueden usar \"\", '' o `` (template literals)\nBoolean: Solo dos valores: true o false\nnull: Ausencia intencional de valor - “esto está vacío a propósito”\nundefined: Variable declarada pero sin valor asignado - “aún no tiene valor”\n\n// Number - enteros y decimales (punto flotante de 64 bits)\nlet score = 1000;\nlet health = 75.5;\nlet infinity = Infinity; // Valor especial\n\n// String - cadenas de caracteres\nlet playerName = \"Jugador1\";\n\n// Boolean - verdadero o falso\nlet isGameRunning = true;\nlet isPaused = false;\n\n// Tipos especiales\nlet powerUp = null;        // Ausencia intencional - \"no hay powerup\"\nlet specialAbility;        // undefined - no inicializada aún"
  },
  {
    "objectID": "ch2_p1_js.html#template-literals-es2015",
    "href": "ch2_p1_js.html#template-literals-es2015",
    "title": "Desarrollo en el cliente",
    "section": "Template Literals (ES2015+)",
    "text": "Template Literals (ES2015+)\n\nBackticks (`): En lugar de comillas normales\nInterpolación ${}: Inserta variables o expresiones dentro del string\nMultilínea: Puedes escribir strings en varias líneas sin concatenar\nExpresiones: Dentro de ${} puedes poner cualquier código JavaScript\n\nlet level = 5;\nlet experience = 1250;\n\n// Interpolación de strings - inserta valores de variables\nlet status = `Nivel ${level} - EXP: ${experience}`;\n\n// También puedes usar expresiones dentro de ${}\nlet progress = `Progreso: ${(experience / 2000) * 100}%`;\n\n// Strings multilínea - se respetan los saltos de línea\nlet gameInfo = `\nJugador: ${playerName}\nNivel: ${level}\nPuntuación: ${score}\nEstado: ${score &gt; 1000 ? 'Pro' : 'Novato'}\n`;"
  },
  {
    "objectID": "ch2_p1_js.html#operadores-aritméticos",
    "href": "ch2_p1_js.html#operadores-aritméticos",
    "title": "Desarrollo en el cliente",
    "section": "Operadores Aritméticos",
    "text": "Operadores Aritméticos\n\nOperadores matemáticos básicos: +, -, *, /, % (módulo/resto)\nComparación: &gt;, &lt;, &gt;=, &lt;= comparan valores\nLógicos: && (y), || (o), ! (no) para combinar condiciones\nPrecedencia: Multiplicación y división antes que suma y resta\n\n// Operadores aritméticos - similares a Java\nlet damage = baseDamage + bonus;\nlet remaining = total - used;\nlet area = width * height;\nlet average = sum / count;\nlet remainder = value % modulo; // Resto de división\n\n// Lógicos - combinan condiciones -&gt; Devuelven true or false\nlet canAct = isAlive && !isStunned; // Y lógico, NO lógico\nlet shouldRespawn = isDead || health &lt;= 0; // O lógico"
  },
  {
    "objectID": "ch2_p1_js.html#operadores-de-comparación",
    "href": "ch2_p1_js.html#operadores-de-comparación",
    "title": "Desarrollo en el cliente",
    "section": "Operadores de Comparación",
    "text": "Operadores de Comparación\n\n=== (estricto): Compara valor Y tipo - siempre recomendado\n== (débil): Convierte tipos antes de comparar - evitar (causa bugs)\n!== (desigualdad estricta): Diferente valor O tipo\nEjemplo: 5 == \"5\" es true, pero 5 === \"5\" es false\n\n// Igualdad estricta (recomendado) - compara valor Y tipo\nif (playerID === targetID) {\n    // Solo true si ambos tienen el mismo valor Y tipo\n}\n\n// Desigualdad estricta - diferente valor O tipo\nif (level !== previousLevel) {\n    // true si son diferentes\n}\n\n// Igualdad débil (EVITAR) - hace conversión de tipos\nif (score == \"100\") {\n    // true - convierte \"100\" a número 100. Puede causar bugs difíciles de encontrar\n}\n\n// Comparación de tipos diferentes\nconsole.log(5 === \"5\");  // false - número vs string\nconsole.log(5 == \"5\");   // true  - convierte a mismo tipo"
  },
  {
    "objectID": "ch2_p1_js.html#operadores-modernos-es2020",
    "href": "ch2_p1_js.html#operadores-modernos-es2020",
    "title": "Desarrollo en el cliente",
    "section": "Operadores Modernos (ES2020+)",
    "text": "Operadores Modernos (ES2020+)\n\nNullish coalescing (??): Valor por defecto solo si null o undefined\nOptional chaining (?.): Accede a propiedades sin error si no existen\nLogical assignment: Asigna solo si cumple condición\nDiferencia con ||: || también considera 0, \"\", false como “falsy”\n\n// Nullish coalescing - valor por defecto solo para null/undefined\nlet playerName = savedName ?? \"Jugador Anónimo\";\n// Si savedName es 0 o \"\" NO usa el default (solo null/undefined)\n\n// Optional chaining - evita errores si propiedades no existen\nlet weapon = player.inventory?.equipment?.weapon;\n// Si inventory o equipment es null/undefined, retorna undefined sin error\n\n// Logical assignment\nplayerName ||= \"Jugador por defecto\";  // Asigna solo si falsy\nplayerName ??= \"Valor por defecto\";   // Asigna solo si null/undefined\n\n// Diferencia entre || y ??\nlet count = 0;\nlet result1 = count || 10;  // 10 (0 es falsy)\nlet result2 = count ?? 10;  // 0  (0 no es null/undefined)"
  },
  {
    "objectID": "ch2_p1_js.html#valores-falsy",
    "href": "ch2_p1_js.html#valores-falsy",
    "title": "Desarrollo en el cliente",
    "section": "Valores Falsy",
    "text": "Valores Falsy\n\nJavaScript evalúa algunos valores como false en condiciones\n6 valores falsy: false, 0, \"\", null, undefined, NaN\nTodos los demás son truthy: Incluso \"0\", [], {}\nÚtil para: Validaciones y valores por defecto\n\nJavaScript considera falso (falsy):\n\nfalse - booleano falso\nnull - sin valor\nundefined - no definido (verificación de existencia)\n\"\" - string vacío\n0 - cero numérico\nNaN - “Not a Number”"
  },
  {
    "objectID": "ch2_p1_js.html#utiliza-siempre",
    "href": "ch2_p1_js.html#utiliza-siempre",
    "title": "Desarrollo en el cliente",
    "section": "Utiliza siempre ===",
    "text": "Utiliza siempre ==="
  },
  {
    "objectID": "ch2_p1_js.html#creación-de-arrays",
    "href": "ch2_p1_js.html#creación-de-arrays",
    "title": "Desarrollo en el cliente",
    "section": "Creación de Arrays",
    "text": "Creación de Arrays\n\nArrays dinámicos: Pueden crecer o reducirse automáticamente\nTipos mezclados: Puedes guardar diferentes tipos en el mismo array\nÍndice desde 0: El primer elemento está en posición 0\nlength: Propiedad que indica cuántos elementos tiene\n\n// Creación de arrays - literal (forma más común)\nlet empty = [];\nlet numbers = [1, 2, 3, 4, 5];\nlet mixed = [\"texto\", 42, true, null]; // Tipos mezclados OK\n\n// Constructor Array (menos común)\nlet inventory = new Array(10); // Crea array con 10 espacios vacíos\n\n// Acceso y modificación por índice\nconsole.log(numbers[0]);        // 1 - primer elemento\nnumbers[2] = 999;              // Modifica tercer elemento\n\n// Arrays dinámicos - se expanden automáticamente\nnumbers[10] = 100;             // Salta del índice 4 al 10\nconsole.log(numbers.length);    // 11 - ahora tiene 11 elementos\n// Los índices 5-9 quedan vacíos (undefined)"
  },
  {
    "objectID": "ch2_p1_js.html#métodos-de-array-modernos",
    "href": "ch2_p1_js.html#métodos-de-array-modernos",
    "title": "Desarrollo en el cliente",
    "section": "Métodos de Array Modernos",
    "text": "Métodos de Array Modernos\n\nfilter(): Crea nuevo array con elementos que cumplen condición\nmap(): Crea nuevo array transformando cada elemento\nNo modifican el original: Retornan nuevo array (inmutabilidad)\nCallback: Función que se ejecuta por cada elemento\n\n// Array de ejemplo\nlet enemies = [\n    { id: 1, health: 100, type: \"orc\" },\n    { id: 2, health: 50, type: \"goblin\" },\n    { id: 3, health: 0, type: \"orc\" }\n];\n\n// filter() - selecciona elementos que cumplen condición\n// Retorna nuevo array con enemigos vivos\nlet aliveEnemies = enemies.filter(enemy =&gt; enemy.health &gt; 0);\n// [{ id: 1, ... }, { id: 2, ... }]\n\n// Solo los orcos\nlet orcs = enemies.filter(enemy =&gt; enemy.type === \"orc\");\n\n// map() - transforma cada elemento\n// Extrae solo la salud de cada enemigo\nlet healthValues = enemies.map(enemy =&gt; enemy.health);\n// [100, 50, 0]"
  },
  {
    "objectID": "ch2_p1_js.html#más-métodos-de-arrays",
    "href": "ch2_p1_js.html#más-métodos-de-arrays",
    "title": "Desarrollo en el cliente",
    "section": "Más Métodos de Arrays",
    "text": "Más Métodos de Arrays\n\nfind(): Retorna el primer elemento que cumple condición\nfindIndex(): Retorna el índice del primer elemento que cumple condición\nevery(): Retorna true si todos los elementos cumplen condición\nsome(): Retorna true si algún elemento cumple condición\nreduce(): Reduce array a un único valor (suma, acumulación, etc.)\n\n// find() - retorna PRIMER elemento que cumple condición\nlet firstOrc = enemies.find(enemy =&gt; enemy.type === \"orc\"); // { id: 1, health: 100, type: \"orc\" }\n\n// findIndex() - retorna índice del primer match\nlet orcIndex = enemies.findIndex(enemy =&gt; enemy.type === \"orc\"); // 0\n\n// every() - ¿TODOS cumplen la condición?\nlet allDead = enemies.every(enemy =&gt; enemy.health === 0); // false -&gt; no todos muerto\n\n// some() - ¿ALGUNO cumple la condición?\nlet someDead = enemies.some(enemy =&gt; enemy.health === 0); // true -&gt; al menos un muerto\n\n// reduce() - reduce array a un solo valor\n// Suma total de la salud de todos los enemigos\nlet totalHealth = enemies.reduce((sum, enemy) =&gt; \n    sum + enemy.health, 0); // 0 es valor inicial\n// 150 (100 + 50 + 0)"
  },
  {
    "objectID": "ch2_p1_js.html#modificar-arrays",
    "href": "ch2_p1_js.html#modificar-arrays",
    "title": "Desarrollo en el cliente",
    "section": "Modificar Arrays",
    "text": "Modificar Arrays\n\npush(): Añade elemento al final - modifica el array original\npop(): Elimina y retorna último elemento\nshift(): Elimina y retorna primer elemento\nunshift(): Añade elemento al principio\nsplice(): Elimina/inserta elementos en cualquier posición\n\n// push() - añadir al final (modifica original)\nenemies.push({ id: 4, health: 75, type: \"troll\" });\n\n// shift() - quitar del principio\nlet firstEnemy = enemies.shift();\n\n// pop() - quitar del final\nlet lastEnemy = enemies.pop();\n\n// splice(inicio, cantidad) - eliminar elementos\nenemies.splice(1, 2); // Eliminar 2 elementos desde índice 1\n\n// splice(inicio, 0, elemento) - insertar sin eliminar\nenemies.splice(1, 0, newEnemy); // Insertar en índice 1\n\n// unshift() - añadir al principio\nenemies.unshift({ id: 0, health: 50, type: \"scout\" });"
  },
  {
    "objectID": "ch2_p1_js.html#destructuring-de-arrays",
    "href": "ch2_p1_js.html#destructuring-de-arrays",
    "title": "Desarrollo en el cliente",
    "section": "Destructuring de Arrays",
    "text": "Destructuring de Arrays\n\nDestructuring: Extraer valores de arrays a variables individuales\nRest operator (...): Captura “el resto” de elementos\nSintaxis limpia: Evita acceder por índice repetidamente\n\n// Extraer valores de array a variables\nlet coordinates = [100, 200];\nlet [x, y] = coordinates;  // x = 100, y = 200\n\n// Ignorar elementos\nlet [first, , third] = [1, 2, 3]; // first = 1, third = 3\n\n// Rest operator - captura el resto de elementos\nlet [first, second, ...rest] = inventory;\n// first = primer elemento\n// second = segundo elemento\n// rest = array con todos los demás\n\n// En parámetros de función\nfunction showCoords([x, y]) {\n    console.log(`X: ${x}, Y: ${y}`);\n}"
  },
  {
    "objectID": "ch2_p1_js.html#sentencias-básicas",
    "href": "ch2_p1_js.html#sentencias-básicas",
    "title": "Desarrollo en el cliente",
    "section": "Sentencias Básicas",
    "text": "Sentencias Básicas\n\nif-else: Ejecuta código según condición verdadera o falsa\nelse if: Permite múltiples condiciones en cadena\nCondiciones: Expresiones que evalúan a true o false\nBloques {}: Agrupan varias instrucciones\n\n// if - else - estructura condicional básica\nif (health &gt; 50) { // Siempre recomendado con llaves\n    // Se ejecuta si la condición es verdadera\n    statusColor = \"green\";\n} else if (health &gt; 20) {\n    // Se ejecuta si la primera es falsa y esta es verdadera\n    statusColor = \"yellow\";\n} else {\n    // Se ejecuta si todas las anteriores son falsas\n    statusColor = \"red\";\n}\n\n// Sin llaves para una sola instrucción (no recomendado)\nif (isDead) gameOver();"
  },
  {
    "objectID": "ch2_p1_js.html#switch",
    "href": "ch2_p1_js.html#switch",
    "title": "Desarrollo en el cliente",
    "section": "Switch",
    "text": "Switch\n\nswitch: Compara una expresión contra múltiples valores\ncase: Cada posible valor a comparar\nbreak: Sale del switch (sin él, continúa al siguiente case)\ndefault: Se ejecuta si ningún case coincide\n\n// switch - útil cuando comparas misma variable con muchos valores\nswitch (gameState) {\n    case \"menu\":\n        // Se ejecuta si gameState === \"menu\"\n        showMenu();\n        break; // Sale del switch.\n\n    case \"rollback\": // Como no hay break se ejecuta el siguiente \n        rollback();\n        \n    case \"playing\":\n        updateGame();\n        break;\n        \n    default:\n        // Se ejecuta si ningún case coincide\n        handleUnknownState();\n}"
  },
  {
    "objectID": "ch2_p1_js.html#loops",
    "href": "ch2_p1_js.html#loops",
    "title": "Desarrollo en el cliente",
    "section": "Loops",
    "text": "Loops\n\nfor tradicional: Cuando sabes cuántas iteraciones necesitas\nfor…of: Itera sobre valores de un array (ES2015+) - más limpio\nfor…in: Itera sobre claves/propiedades de un objeto\nbreak: Sale del loop inmediatamente\ncontinue: Salta a la siguiente iteración\n\n// for tradicional - control total sobre índice\nfor (let i = 0; i &lt; enemies.length; i++) {\n    updateEnemy(enemies[i]);\n    // i = 0, 1, 2, ... hasta length-1\n}\n\n// for...of - itera valores (ES2015+) - MÁS LIMPIO\nfor (let enemy of enemies) {\n    updateEnemy(enemy); // enemy es el valor directamente\n}\n\n// for...in - itera propiedades/claves (para objetos)\nfor (let key in gameConfig) {\n    console.log(key, gameConfig[key]);\n    // key = \"width\", \"height\", etc.\n}"
  },
  {
    "objectID": "ch2_p1_js.html#while",
    "href": "ch2_p1_js.html#while",
    "title": "Desarrollo en el cliente",
    "section": "While",
    "text": "While\n\nwhile: Repite mientras la condición sea verdadera\nCuidado con loops infinitos: Asegúrate que la condición eventualmente sea falsa\ndo…while: Ejecuta al menos una vez, luego verifica condición\n\n// while - repite mientras la condición sea true\nwhile (isGameRunning && playerLives &gt; 0) {\n    processGameFrame();\n    // IMPORTANTE: algo dentro debe cambiar la condición\n    // o será un loop infinito\n}\n\n// do...while - ejecuta AL MENOS una vez\nlet input;\ndo {\n    input = prompt(\"Ingresa comando:\");\n} while (input !== \"quit\");"
  },
  {
    "objectID": "ch2_p1_js.html#declaración-de-funciones",
    "href": "ch2_p1_js.html#declaración-de-funciones",
    "title": "Desarrollo en el cliente",
    "section": "Declaración de Funciones",
    "text": "Declaración de Funciones\n\nfunction: Palabra clave para declarar funciones\nParámetros: Valores que recibe la función (entre paréntesis)\nreturn: Devuelve un valor y termina la función\nExpresión de función: Asignar función a una variable\nHoisting: Las declaraciones se mueven al inicio (se pueden llamar antes de declarar)\n\n\n\n// Declaración tradicional - se puede llamar antes de declarar\nfunction calculateDamage(baseDamage, criticalHit) {\n    // Verifica si hay golpe crítico\n    if (criticalHit) {\n        return baseDamage * 2; // Retorna el doble\n    }\n    return baseDamage; // Retorna daño normal\n}\n\n// Uso\nlet damage = calculateDamage(50, true); // 100\n\n// Expresión de función - asignada a variable\nlet heal = function(amount) {\n    player.health += amount; // Suma salud\n    // Limita la salud al máximo\n    if (player.health &gt; player.maxHealth) {\n        player.health = player.maxHealth;\n    }\n};\n\n// Uso\nheal(20);"
  },
  {
    "objectID": "ch2_p1_js.html#arrow-functions-es2015",
    "href": "ch2_p1_js.html#arrow-functions-es2015",
    "title": "Desarrollo en el cliente",
    "section": "Arrow Functions (ES2015+)",
    "text": "Arrow Functions (ES2015+)\n\nSintaxis más concisa que funciones tradicionales\nNo tienen su propio this: Heredan this del contexto (útil en callbacks)\nRetorno implícito: Si es una sola expresión, retorna automáticamente (sin return)\nIdeal para: Callbacks, funciones cortas, map/filter/reduce\n\n// Arrow function completa con llaves\nlet movePlayer = (deltaX, deltaY) =&gt; {\n    player.x += deltaX; // Mueve en X\n    player.y += deltaY; // Mueve en Y\n};\n\n// Arrow function con una expresión - retorno implícito\nlet isAlive = (entity) =&gt; entity.health &gt; 0;\n// Equivalente a: function(entity) { return entity.health &gt; 0; }\n\n// Sin parámetros - paréntesis vacíos\nlet generateRandomID = () =&gt; Math.random().toString(36);\n\n// Un parámetro - paréntesis opcionales\nlet double = x =&gt; x * 2;"
  },
  {
    "objectID": "ch2_p1_js.html#parámetros-de-función",
    "href": "ch2_p1_js.html#parámetros-de-función",
    "title": "Desarrollo en el cliente",
    "section": "Parámetros de Función",
    "text": "Parámetros de Función\n\nParámetros por defecto: Valor asignado si no se pasa argumento\nRest parameters (...): Captura argumentos restantes en un array\nDestructuring: Extrae propiedades de objetos directamente en parámetros\nOrden: Parámetros normales, luego con default, luego rest\n\n// Parámetros por defecto (ES2015+)\nfunction createEnemy(health = 100, damage = 10) {\n    return { health, damage };\n}\n// Si no pasas argumentos, usa los valores por defecto\ncreateEnemy(); // { health: 100, damage: 10 }\ncreateEnemy(50); // { health: 50, damage: 10 }\n\n// Rest parameters - captura argumentos restantes en array\nfunction logMessage(level, ...messages) {\n    console.log(`[${level}]`, ...messages);\n}\nlogMessage(\"ERROR\", \"Falló\", \"al cargar\", \"recurso\");\n// messages = [\"Falló\", \"al cargar\", \"recurso\"]"
  },
  {
    "objectID": "ch2_p1_js.html#closures",
    "href": "ch2_p1_js.html#closures",
    "title": "Desarrollo en el cliente",
    "section": "Closures",
    "text": "Closures\n\nClosure: Función que “recuerda” variables de su contexto exterior\nEncapsulación: Variables privadas que solo la función puede modificar\nEstado persistente: Mantiene estado entre llamadas sin variables globales\nÚtil para: Contadores, factory functions, datos privados\n\n\n\n// Closure - función que retorna objeto con métodos\nfunction createCounter(initialValue = 0) {\n    // Variable privada - solo accesible dentro\n    let count = initialValue;\n    \n    // Retorna objeto con métodos que acceden \n    // a 'count'\n    return {\n        // Incrementa y retorna nuevo valor\n        increment: () =&gt; ++count,\n        \n        // Decrementa y retorna nuevo valor\n        decrement: () =&gt; --count,\n        \n        // Retorna valor actual\n        getValue: () =&gt; count\n    };\n}\n\n// Cada contador tiene su propio estado\nlet scoreCounter = createCounter(0);\nscoreCounter.increment(); // 1\nscoreCounter.increment(); // 2\nconsole.log(scoreCounter.getValue()); // 2\n\n// 'count' NO es accesible desde fuera\n// console.log(count); \n// ERROR - no existe aquí"
  },
  {
    "objectID": "ch2_p1_js.html#try-catch-finally",
    "href": "ch2_p1_js.html#try-catch-finally",
    "title": "Desarrollo en el cliente",
    "section": "Try-Catch-Finally",
    "text": "Try-Catch-Finally\n\ntry: Bloque donde puede ocurrir un error\ncatch: Captura el error si ocurre y maneja la situación\nfinally: Se ejecuta SIEMPRE (haya error o no) - útil para limpieza\nerror.message: Descripción del error\n\n// Manejo de errores al cargar partida guardada\ntry {\n    // Intenta parsear JSON - puede fallar si está corrupto\n    let gameData = JSON.parse(savedGameString);\n    loadGame(gameData); // Carga el juego\n    \n} catch (error) {\n    // Se ejecuta SOLO si hay error en try\n    console.error('Error loading game:', error.message);\n    showErrorDialog('No se pudo cargar la partida');\n    \n} finally { // Opcional\n    // Se ejecuta SIEMPRE (con o sin error)\n    hideLoadingSpinner();\n}"
  },
  {
    "objectID": "ch2_p1_js.html#lanzar-excepciones",
    "href": "ch2_p1_js.html#lanzar-excepciones",
    "title": "Desarrollo en el cliente",
    "section": "Lanzar Excepciones",
    "text": "Lanzar Excepciones\n\nthrow: Lanza un error manualmente\nnew Error(): Crea objeto de error con mensaje\nValidaciones: Úsalo para validar inputs antes de procesar\nEl error sube: Si no hay catch, el error se propaga hacia arriba\n\n// Función que valida input y lanza errores si es inválido\nfunction validatePlayerInput(input) {\n    // Verifica que no esté vacío\n    if (!input || input.trim() === '') {\n        throw new Error('El nombre no puede estar vacío');\n    }\n    \n    // Verifica longitud máxima\n    if (input.length &gt; 20) {\n        throw new Error('El nombre es demasiado largo');\n    }\n    \n    // Si pasa las validaciones, retorna input limpio\n    return input.trim();\n}"
  },
  {
    "objectID": "ch2_p1_js.html#local-storage",
    "href": "ch2_p1_js.html#local-storage",
    "title": "Desarrollo en el cliente",
    "section": "Local Storage",
    "text": "Local Storage\n\nlocalStorage: Almacena datos en el navegador de forma permanente\nCapacidad: ~5-10MB (depende del navegador)\nSolo strings: Debes convertir objetos a JSON con JSON.stringify()\nPersiste: Datos permanecen incluso cerrando navegador/reiniciando PC\nPor dominio: Cada sitio web tiene su propio localStorage\n\n// Guardar datos simples (solo strings)\nlocalStorage.setItem('playerName', 'Jugador1');\nlocalStorage.setItem('highScore', '15000');\n\n// Guardar objetos - primero convertir a JSON string\nconst gameConfig = { volume: 0.8, difficulty: 'normal' };\nlocalStorage.setItem('gameConfig', JSON.stringify(gameConfig));\n\n// Leer datos simples\nconst playerName = localStorage.getItem('playerName');\n// \"Jugador1\"\n\n// Eliminar un dato específico\nlocalStorage.removeItem('playerName');\n\n// Eliminar TODOS los datos (usar con cuidado)\nlocalStorage.clear();"
  },
  {
    "objectID": "ch2_p1_js.html#session-storage",
    "href": "ch2_p1_js.html#session-storage",
    "title": "Desarrollo en el cliente",
    "section": "Session Storage",
    "text": "Session Storage\n\nsessionStorage: API idéntica a localStorage\nDuración: Solo durante la sesión actual (cerrar pestaña = se borra)\nPor pestaña: Cada pestaña tiene su propio sessionStorage\nUso típico: Datos temporales como estado actual del juego\nNo se comparte: Entre pestañas ni ventanas\n\n// API idéntica a localStorage\nsessionStorage.setItem('tempData', 'valor temporal');\nconst tempData = sessionStorage.getItem('tempData');\nsessionStorage.removeItem('tempData');\nsessionStorage.clear();\n\n// Ideal para estado temporal del juego actual\nsessionStorage.setItem('currentGameState', \n    JSON.stringify(gameState));"
  },
  {
    "objectID": "ch2_p1_js.html#cookies",
    "href": "ch2_p1_js.html#cookies",
    "title": "Desarrollo en el cliente",
    "section": "Cookies",
    "text": "Cookies\n\nCookies: Método antiguo de almacenamiento\nCapacidad limitada: Solo 4KB\nSe envían al servidor: En cada petición HTTP (aumenta tráfico)\nAPI manual: Más complicado que localStorage\nExpiración configurable: Puedes definir cuándo expiran\n\n// Escribir Cookie con expiración (30 días desde ahora)\n// Sin fecha es la sesión\nconst fecha = new Date();\nfecha.setTime(fecha.getTime() + (30 * 24 * 60 * 60 * 1000));\ndocument.cookie = `highScore=15000; expires=${fecha.toUTCString()}; path=/`;\n\n// Leer cookie (complicado - no hay API directa)\nfunction getCookie(nombre) {\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${nombre}=`);\n    if (parts.length === 2) return parts.pop().split(';').shift();\n    return null; // No encontrada\n}\n\n// Uso\nlet highScore = getCookie('highScore'); // \"15000\"\n\n// Eliminar cookie (establecer fecha pasada)\ndocument.cookie = \"playerName=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";"
  },
  {
    "objectID": "ch2_p1_js.html#comparación-de-métodos",
    "href": "ch2_p1_js.html#comparación-de-métodos",
    "title": "Desarrollo en el cliente",
    "section": "Comparación de Métodos",
    "text": "Comparación de Métodos\n\nlocalStorage: Mejor opción para datos persistentes (configuración, progreso)\nsessionStorage: Perfecto para datos temporales de la sesión actual\nCookies: Solo si necesitas comunicar con el servidor\n\n\n\n\n\n\n\n\n\n\nCaracterística\nlocalStorage\nsessionStorage\nCookies\n\n\n\n\nCapacidad\n~5-10MB\n~5-10MB\n4KB\n\n\nPersistencia\nHasta eliminar manualmente\nSolo sesión actual\nConfigurable (expires)\n\n\nEnvío al servidor\nNo\nNo\nSí (automático)\n\n\nAPI\nSíncrona y simple\nSíncrona y simple\nManual y compleja\n\n\nCompartido\nEntre pestañas\nNO (por pestaña)\nEntre pestañas"
  }
]