---
title: "Capa de Acceso a la Red"
subtitle: "Fundamentos de la transmisi√≥n f√≠sica y control de acceso al medio"
author: "Rub√©n Rodr√≠guez Fern√°ndez (@rrunix)"
date: "17/09/2025"

mermaid:
  theme: default
  themeVariables:
    background: "#ffffff"
---

# Introducci√≥n

## ¬øQu√© es la Capa de Acceso a la Red?

> La Capa de Acceso a la Red se encarga de la **transmisi√≥n f√≠sica de datos entre dispositivos directamente conectados** en una red local

::: {.columns}
::: {.column width="50%"}
**¬øQu√© hace?**

- Maneja los aspectos f√≠sicos de la transmisi√≥n
- Controla el acceso al medio compartido
- Proporciona interfaz entre protocolos superiores y hardware
- Garantiza transmisi√≥n confiable entre nodos adyacentes
:::

::: {.column width="50%"}
**Posici√≥n en los modelos:**

```{mermaid}
graph TD
    subgraph "Modelo OSI"
        L2[Capa 2: Enlace de Datos]
        L1[Capa 1: F√≠sica]
    end
    
    subgraph "Modelo TCP/IP"
        AR[Capa de Acceso a la Red]
    end
    
    L2 -.-> AR
    L1 -.-> AR
    
    style AR fill:#e3f2fd,stroke:#1976d2,stroke-width:3px
```
:::
:::

::: {.callout-important}
**Responsabilidad principal**: Garantizar que los datos puedan transmitirse de manera confiable entre nodos adyacentes en la red
:::

## Ejemplo: Comunicaci√≥n en Red Local

::: {style="height: 10hw; width: auto; overflow: visible;"}
```{mermaid}
sequenceDiagram
    participant A as Computadora A<br/>(00:1A:2B:3C:4D:5E)
    participant S as Switch<br/>(Tabla MAC)
    participant C as Computadora C<br/>(00:3C:4D:5E:6F:70)

    Note over S: Tabla MAC vac√≠a

    Note over A,C: FASE 1: Descubrimiento ARP
    
    A->>S: ARP Request<br/>¬øQui√©n tiene la IP de C?<br/>Destino: Broadcast
    
    Note over S: Aprende: Puerto 1 ‚Üí MAC de A
    
    S->>C: ARP Request (Flooding)
    
    C->>S: ARP Response<br/>Mi MAC es 00:3C:4D:5E:6F:70
    
    Note over S: Aprende: Puerto 3 ‚Üí MAC de C
    
    S->>A: ARP Response (Unicast)

    Note over A,C: FASE 2: Comunicaci√≥n Directa
    
    A->>S: Datos para C
    
    Note over S: Consulta tabla MAC
    
    S->>C: Datos (Solo puerto 3)
```
:::

# Funciones Principales

## 1. Control de Acceso al Medio (MAC)

> Coordina c√≥mo m√∫ltiples dispositivos comparten un medio de transmisi√≥n com√∫n

::: {.columns}
::: {.column width="50%"}
### Ethernet Half-Duplex: CSMA/CD

**Carrier Sense Multiple Access with Collision Detection**

1. Escuchar el medio antes de transmitir
2. Si est√° libre ‚Üí transmitir
3. Si hay colisi√≥n ‚Üí detectar
4. Aplicar backoff exponencial
5. Reintentar transmisi√≥n

*Solo puede transmitir en una direcci√≥n a la vez*. En **Full-Duplex** no necesitar√≠amos realizar controles.
:::

::: {.column width="50%"}
### Redes Inal√°mbricas: CSMA/CA
<br>
**Carrier Sense Multiple Access with Collision Avoidance**

1. Esperar tiempo aleatorio antes de transmitir
2. Usar acknowledgments para confirmar recepci√≥n
3. Protocolo RTS/CTS para problema del nodo oculto

*La detecci√≥n de colisiones es impr√°ctica en radio*
:::
:::

## 2. Direccionamiento F√≠sico

> Opera a nivel de hardware, independiente de protocolos superiores, usando direcciones MAC √∫nicas

```{mermaid}
%%| fig-width: 10
graph LR
    subgraph "Direcci√≥n MAC: 00:1A:2B:3C:4D:5E (48 bits)"
        OUI["00:1A:2B<br/>OUI<br/>(Organizationally Unique Identifier)<br/>Asignado por IEEE"]
        NIC["3C:4D:5E<br/>Identificador del Dispositivo<br/>Asignado por el fabricante"]
    end
    
    style OUI fill:#e3f2fd,stroke:#1976d2,stroke-width:2px
    style NIC fill:#fff3e0,stroke:#f57c00,stroke-width:2px
```

::: {.columns}
::: {.column width="33%"}
**Unicast**

- Un √∫nico destinatario
- Direcci√≥n espec√≠fica del dispositivo
:::

::: {.column width="33%"}
**Broadcast**

- Todos los dispositivos
- FF:FF:FF:FF:FF:FF
:::

::: {.column width="33%"}
**Multicast**

- Grupo espec√≠fico
- Primer bit = 1
:::
:::

::: {.callout-tip}
Las direcciones MAC son como el DNI del dispositivo: √∫nicas, est√°ticas y cada dispositivo tiene una
:::

## 3. Detecci√≥n y Correcci√≥n de Errores

> Garantiza la integridad de los datos transmitidos a trav√©s del medio f√≠sico

### C√≥digos de Redundancia C√≠clica (CRC)

::: {.columns}
::: {.column width="50%"}
**Proceso CRC:**

1. Generar polinomio matem√°tico sobre datos
2. Agregar Frame Check Sequence (FCS) al final
3. Receptor recalcula el CRC
4. Comparar con el recibido
5. Detectar errores de 1 bit y m√∫ltiples bits

**Checksums simples:**

- Suma aritm√©tica de bytes
- Menos robusto pero m√°s r√°pido
:::

::: {.column width="50%"}
**Forward Error Correction (FEC):**

- No solo detecta, tambi√©n **corrige** errores
- C√≥digos Hamming: errores de 1 bit
- Reed-Solomon: errores en r√°fagas
- Especialmente importante en medios inal√°mbricos

```{mermaid}
graph LR
    D[Datos] --> CRC[C√°lculo CRC]
    CRC --> F[Agregar FCS]
    F --> T[Transmitir]
    T --> R[Receptor verifica]
```
:::
:::

## 4. Control de Tama√±o

> Maneja las limitaciones de tama√±o impuestas por diferentes tecnolog√≠as de red

### Maximum Transmission Unit (MTU)

| Tecnolog√≠a | MTU (bytes) | Caracter√≠sticas |
|------------|-------------|-----------------|
| **Ethernet** | 1500 | Est√°ndar m√°s com√∫n en LAN |
| **Token Ring** | 4464 | Tecnolog√≠a legacy |
| **FDDI** | 4352 | Fiber Distributed Data Interface |
| **PPP** | Variable (~1500) | Para compatibilidad con Ethernet |

::: {.callout-warning}
Si datos > MTU ‚Üí La Capa de Acceso a la Red **descarta autom√°ticamente** el paquete
:::

::: {.fragment}
*Nota: El MTU determina el tama√±o m√°ximo de datos que puede transportar una sola trama*
:::

## 5. Sincronizaci√≥n y Temporizaci√≥n

> Coordina el timing entre dispositivos para asegurar la correcta interpretaci√≥n de se√±ales digitales

### Niveles de sincronizaci√≥n

::: {.columns}
::: {.column width="50%"}
**Tipos de sincronizaci√≥n:**

- **Sincronizaci√≥n de bit**: Determina l√≠mites temporales de cada bit
- **Sincronizaci√≥n de trama**: Identifica inicio y fin de cada trama
- **Sincronizaci√≥n de s√≠mbolo**: Para modulaciones complejas (QAM)
:::

::: {.column width="50%"}
**¬øPor qu√© es cr√≠tica?**

- En redes de alta velocidad, peque√±as diferencias causan errores
- Establece marcos de tiempo comunes
- Permite interpretaci√≥n correcta de se√±ales
- Esencial para comunicaci√≥n digital confiable
:::
:::

::: {.fragment}
```{mermaid}
graph LR
    B[Bits] --> F[Tramas]
    F --> S[S√≠mbolos]
    S --> D[Datos correctos]
    
    style B fill:#e8f5e8
    style F fill:#fff3e0
    style S fill:#e3f2fd
    style D fill:#f3e5f5
```
:::

## 6. Gesti√≥n de Topolog√≠a

> Descubre y mantiene informaci√≥n sobre la estructura f√≠sica de la red

### Componentes principales

::: {.columns}
::: {.column width="50%"}
**Mantenimiento de enlaces:**

- Keepalive messages
- Detecci√≥n proactiva de fallos
- Antes de afectar tr√°fico de usuarios

**Protocolos de detecci√≥n:**

- **CDP** (Cisco Discovery Protocol)
- **LLDP** (Link Layer Discovery Protocol)
- Dispositivos se identifican mutuamente
- Comparten informaci√≥n de capacidades
:::

::: {.column width="50%"}
**Prevenci√≥n de bucles:**

- Spanning Tree Protocol (STP)
- Previene bucles en topolog√≠as redundantes
- Evita tormentas de broadcast

**Adaptaci√≥n autom√°tica:**

- Detecta cambios en la topolog√≠a
- Responde a fallos de enlaces
- Incorpora nuevos dispositivos
:::
:::

## 7. Control de Calidad de Servicio (QoS)

> Prioriza diferentes tipos de tr√°fico seg√∫n su importancia y requisitos de rendimiento

### Mecanismos de gesti√≥n

::: {.columns}
::: {.column width="50%"}
**Gesti√≥n de buffers:**

- **Weighted Fair Queuing**: Recursos proporcionales seg√∫n importancia
- **Priority Queuing**: Tr√°fico cr√≠tico tiene precedencia
- **Random Early Detection**: Descarta proactivamente antes de saturaci√≥n
:::

::: {.column width="50%"}
**Aplicaciones beneficiadas:**

- üé• Video en tiempo real
- üìû VoIP (Voz sobre IP)
- üéÆ Gaming online
- üíº Aplicaciones cr√≠ticas de negocio

*Fundamental para aplicaciones sensibles al tiempo*
:::
:::

::: {.callout-tip}
QoS garantiza que aplicaciones cr√≠ticas reciban el ancho de banda necesario incluso en momentos de congesti√≥n
:::

# Dispositivos de Capa 2

## Switches: Evoluci√≥n y Tipos

::: {.columns}
::: {.column width="50%"}
**Switches No Gestionados**

- Plug-and-play
- Aprendizaje MAC autom√°tico
- Redes peque√±as/dom√©sticas
- Sin configuraci√≥n
:::

::: {.column width="50%"}
**Switches Gestionados**

- VLANs y segmentaci√≥n
- QoS y priorizaci√≥n
- SNMP para monitorizaci√≥n
- Seguridad 802.1X
:::
:::

## Otros Dispositivos de Acceso

| Dispositivo | Funci√≥n | Caracter√≠sticas | Aplicaci√≥n |
|-------------|---------|----------------|------------|
| **Access Points** | WiFi ‚Üî Cableado | CSMA/CA, Beamforming | Redes inal√°mbricas |
| **Repetidores** | Extensi√≥n alcance | Regeneraci√≥n se√±al | Superar distancia |
| **Media Converters** | Cambio de medio | Fibra ‚Üî Cobre | Migraci√≥n gradual |
| **Transceivers** | Modular | SFP/SFP+/QSFP | Flexibilidad |

::: {.fragment}
```{mermaid}
graph LR
    PC["üíª PC"]
    AP["üì° Access Point"]
    SW["üîå Switch"]
    MC1["üîÑ Media Converter"]
    FO["üåü Fibra √ìptica"]
    MC2["üîÑ Media Converter"]
    RT["üåê Router"]
    
    PC <-.->|"WiFi"| AP
    AP <-->|"Ethernet"| SW
    SW <-->|"Cobre"| MC1
    MC1 <-->|"Fibra"| FO
    FO <-->|"Fibra"| MC2
    MC2 <-->|"Ethernet"| RT
```
:::

# Protocolos Principales

## Ethernet (IEEE 802.3)

### Estructura de Trama Ethernet

```{mermaid}
packet-beta
    0-15: "Pre√°mbulo"
    16-23: "SFD"
    24-71: "MAC Destino (6 bytes)"
    72-119: "MAC Origen (6 bytes)"
    120-135: "Tipo/Longitud"
    136-151: "Datos"
    152-167: "..."
    168-183: "Datos (Payload)"
    184-199: "..."
    200-215: "Datos"
    216-231: "FCS (4 bytes)"
```

::: {.columns}
::: {.column width="50%"}
**Campos principales:**

- Pre√°mbulo: Sincronizaci√≥n
- MACs: Identificaci√≥n √∫nica
- Tipo: Protocolo superior (IPv4: 0x0800)
- Payload: Datos + padding si < 46 bytes
:::

::: {.column width="50%"}
**Evoluci√≥n de velocidades:**

- 10Base-T: 10 Mbps
- Fast Ethernet: 100 Mbps
- Gigabit: 1 Gbps
- 10G/40G/100G Ethernet
:::
:::

## WiFi (IEEE 802.11)

### Trama WiFi: Mayor complejidad

```{mermaid}
packet-beta
    0-15: "Frame Control (2 bytes)"
    16-31: "Duration/ID (2 bytes)"
    32-79: "Address 1 - Receiver (6 bytes)"
    80-127: "Address 2 - Transmitter (6 bytes)"
    128-175: "Address 3 - BSSID (6 bytes)"
    176-191: "Seq Control (2 bytes)"
    192-239: "Address 4 (opcional)"
    240-255: "QoS Control (opcional)"
    256-287: "HT Control (opcional)"
    288-319: "Payload (0-2304 bytes)"
    320-351: "FCS (4 bytes)"
```

::: {.callout-note}
WiFi necesita hasta 4 direcciones MAC para manejar la complejidad del medio inal√°mbrico
:::

## Evoluci√≥n de Est√°ndares WiFi

| Generaci√≥n | Est√°ndar | Velocidad Max | Bandas | A√±o |
|------------|----------|---------------|--------|-----|
| **WiFi 4** | 802.11n | 600 Mbps | 2.4/5 GHz | 2009 |
| **WiFi 5** | 802.11ac | 3.5 Gbps | 5 GHz | 2014 |
| **WiFi 6** | 802.11ax | 9.6 Gbps | 2.4/5 GHz | 2019 |
| **WiFi 6E** | 802.11ax | 9.6 Gbps | + 6 GHz | 2020 |
| **WiFi 7** | 802.11be | 46 Gbps | 2.4/5/6 GHz | 2024 |

::: {.columns}
::: {.column width="50%"}
**Mejoras clave:**

- MIMO (m√∫ltiples antenas)
- OFDMA (mejor uso espectro)
- Beamforming direccional (dirigir hacia un punto en concreto)
:::

::: {.column width="50%"}
**Trade-offs de bandas:**

- 2.4 GHz: Mayor alcance, menor velocidad
- 5 GHz: Mayor velocidad, menor alcance
- 6 GHz: M√°xima velocidad, m√≠nimo alcance
:::
:::

## PPP y Frame Relay

::: {.columns}
::: {.column width="50%"}
### Point-to-Point Protocol (PPP)

**Caracter√≠sticas:**

- Enlaces punto a punto
- Detecci√≥n de errores
- Autenticaci√≥n (PAP/CHAP)
- Configuraci√≥n IP autom√°tica

**Uso actual:**

- Enlaces de respaldo
- Conexiones satelitales
- Algunas VPNs
:::

::: {.column width="50%"}
### Frame Relay

**Caracter√≠sticas:**

- WAN con circuitos virtuales
- Conmutaci√≥n de tramas
- Control de congesti√≥n

**Estado:**

- Reemplazado por MPLS
- Legacy en empresas antiguas
- Conceptos a√∫n relevantes
:::
:::

## ARP: Address Resolution Protocol

### Traducci√≥n IP ‚Üí MAC

```{mermaid}
%%| fig-width: 10
sequenceDiagram
    participant A as Host A<br/>IP: 192.168.1.10<br/>MAC: AA:BB:CC:DD:EE:FF
    participant N as Red Local<br/>(Broadcast)
    participant B as Host B<br/>IP: 192.168.1.20<br/>MAC: 11:22:33:44:55:66
    
    Note over A: Necesito MAC de 192.168.1.20
    
    A->>N: ARP Request (Broadcast)<br/>¬øQui√©n tiene 192.168.1.20?
    N->>B: ARP Request
    
    Note over B: ¬°Esa es mi IP!
    
    B->>A: ARP Reply (Unicast)<br/>192.168.1.20 = 11:22:33:44:55:66
    
    Note over A: Guardo en cach√© ARP
```

::: {.columns}
::: {.column width="50%"}
**Proceso ARP:**

1. Broadcast preguntando por IP
2. Dispositivo con esa IP responde
3. Se guarda en cach√© local
4. Temporizador elimina entradas viejas
:::

::: {.column width="50%"}
**Tipos de ARP:**

- **Din√°mico**: Aprendizaje autom√°tico
- **Est√°tico**: Entradas manuales permanentes
- **Proxy ARP**: Router responde por otros
- **Gratuitous**: Anuncio proactivo
:::
:::

# Consideraciones Pr√°cticas

## L√≠mites F√≠sicos y Distancias

### Cable de Cobre (UTP/STP)

::: {.callout-warning}
**L√≠mite m√°ximo: 100 metros**

M√°s all√° requiere regeneraci√≥n de se√±al
:::

::: {.columns}
::: {.column width="50%"}
**Causas de la limitaci√≥n:**

- Atenuaci√≥n de se√±al
- Interferencia electromagn√©tica
- Crosstalk entre pares
- Degradaci√≥n con distancia
:::

::: {.column width="50%"}
**Soluciones:**

- Switches cada 100m
- Repetidores/Extensores
- Fibra √≥ptica (kil√≥metros)
- Enlaces inal√°mbricos
:::
:::

### Comparaci√≥n de Medios

| Medio | Distancia Max | Velocidad | Interferencia |
|-------|---------------|-----------|---------------|
| UTP Cat5e | 100m | 1 Gbps | Alta |
| UTP Cat6a | 100m | 10 Gbps | Media |
| Fibra MM | 2 km | 10 Gbps | Nula |
| Fibra SM | 100+ km | 100 Gbps | Nula |

## Dominios de Colisi√≥n: Switch vs Hub

```{mermaid}
%%| fig-width: 14
graph TB
    subgraph "HUB - Medio Compartido"
        H1[Hub]
        SHARED((Medio<br/>Compartido))
        PC1[PC1] --- SHARED
        PC2[PC2] --- SHARED
        PC3[PC3] --- SHARED
        PC4[PC4] --- SHARED
        SHARED --- H1
    end
    
    subgraph "SWITCH - Dominios Separados"
        S1[Switch]
        PC5[PC5] --- S1
        PC6[PC6] --- S1
        PC7[PC7] --- S1
        PC8[PC8] --- S1
    end
    
    classDef collision fill:#ffcdd2,stroke:#d32f2f
    classDef nocollision fill:#c8e6c9,stroke:#388e3c
    classDef shared fill:#fff3e0,stroke:#f57c00
    
    class H1,PC1,PC2,PC3,PC4 collision
    class S1,PC5,PC6,PC7,PC8 nocollision
    class SHARED shared
```

::: {.callout-tip}
Los switches crean **dominios de colisi√≥n separados para cada puerto**, evitando colisiones entre dispositivos en diferentes puertos
:::

## Ejemplo Pr√°ctico: Verificaci√≥n de Configuraci√≥n

### Comandos √∫tiles para verificar la capa de acceso

::: {.columns}
::: {.column width="50%"}
**Ver informaci√≥n de red:**
```bash
# Linux/Mac - Ver direcci√≥n MAC
ifconfig

# Windows - Ver direcci√≥n MAC
ipconfig /all

# Ver tabla ARP
arp -a
```
:::

::: {.column width="50%"}
**Ejemplo de salida ARP:**
```
192.168.1.1   00:1a:2b:3c:4d:5e
192.168.1.10  00:2b:3c:4d:5e:6f
192.168.1.20  00:3c:4d:5e:6f:70
```

*Muestra las asociaciones IP-MAC en la cach√© local*
:::
:::

# Resumen

## Puntos Clave

::: {.incremental}
- La **Capa de Acceso a la Red** maneja la transmisi√≥n f√≠sica y el control de acceso al medio compartido
- Combina las funciones de las **capas f√≠sica y de enlace del modelo OSI**
- **Control de acceso al medio**: CSMA/CD (Ethernet) vs CSMA/CA (WiFi)
- **Direcciones MAC**: 48 bits, √∫nicas por dispositivo (OUI + ID dispositivo)
- **Switches** evolucionaron desde hubs, creando dominios de colisi√≥n independientes
- **Detecci√≥n de errores** mediante CRC y t√©cnicas FEC
- **MTU** define el tama√±o m√°ximo de trama (Ethernet: 1500 bytes)
- **ARP** resuelve la traducci√≥n entre direcciones IP y MAC
:::
